package main.problems.leetcode;

import java.util.*;

public class LongestSubstringWithoutRepitition {
    public static void main (String[] args) {
//        System.out.println(lengthOfLongestSubstring("abcabcbb"));
//        System.out.println(isValid("aabbcd"));
//        System.out.println("ANSWER: " + substrCount(7, "abcbaba"));
        System.out.println("ANSWER: " + substrCount(55269,
                "idfbidecgjjfdfiffhjeeegdbbdfbhfikkdfdfkihikdkhhgefdkcbdigfkiggkgedckicfbdeccdgdjidghgfefjfjickhdhbfdeefegefifhbijfeefghjfeheddhihbcikeeekeeiibigcehjghkkkcddghbhijfhkhgfcgfcfdhegiiikffdcgegbidkjecbeeejfeekhgiidjejkhigdkjbcihidcdfgfeebebhbbkhfficjeikkkfdjkjdjfkgegfbkkjdegidfebebedieikcgggkggedcghdikihfdiedhccdikijhikgjbebhdjeijkgcjgcefghjddkdhgfihiihckccgjkdhejcbkbdejifjcifhecfiejjhjikcghcjdheeigghfcgdikfcfgfdhkdbekccjdjhfejdhdfkikhcfbjddejfhkfedbedbkjfjkjhikdjdfhhijkhifbdikedehbkgeghfghhkfdjbcejheeijdgggdckgiddfidfhffkdkhbkekechfdcifddjijjehekcbdddkbcibedgedibcbfgfejkckbbkceijgciekdkhhgbfjjbjfibiieceebijgbckgijffdjchkkbigjbbgkbfhhfihhcjhfefcgegbihefhcicfhehfdjbcckbfeeejcgjhigjbikhjghchgkfcdeddfkcgifjhfcfbceiccecgkehibkccefkejckeiekhfeiikjbkgkhgjkbhijjiekfgebbkeffdjigekkfibckccickhifijkiggjbedeecifidbfbkchfbfebbdjjkidfbehjjfeihggcgfbkjfigjjjebgchgbccjikbgcgidjkghkbbbedghfbccjifjkhhdkehchjkcedkkejjjbecbbjbkkeejekdifhghjefgkihjhjedjbdfjdeehkbiibeckdeficghgdghibchididfkjebgeekdhcdjchdihcfjkhfejkgfhgfgchhehhbhfciiifidehjhcgejgdcjhckkgejdjfhjcgbjeebjekbddbdkgcfbfdkiecfibidehiejcehkciejfbfckeecgcbjkekicbhddhhheggbcecdhdbghgiejgjidkbjebchgkjdiefcdjjdgjdkjjggbkdcchidbcechfdkekjjicfddfdjfhbgjcdefjkbcieficjkjjhbhggfhgiiefhejddbffjhhfdccicdkbgifkkdfbjfigbchfgiifekijkiefkecggihebhiebbcjhgjjcfehikfekhfdgejighggffkegikjkkegdfhbfgijdhcgjieceijjkhbchkikcgihbkihbghfchehdcjhkjcfkhecbccdcbeiekhhekjcdkhbjbghbbkfeeibkijgkeikgchhgikkjgjkcbifbkfjfbbgfifbbifcbebcjbhkdjccdgffgbdecffigfdiegkjgkjeefjbhfekiibckchfejbghbdiceeekgekhfejgfgdgckhgiiijcfhkicicfhkegcdjkbjkdikededeegdfjbbcihjhigcgggehecbfiijekjgihhfhgcgkkjkikhfjhdbdhjgkggjgkcdicjighbgcecfjehgeebjkfjhgkcekbefcidggbgefikgecbbkdhdkcjebfeijdhihfjddckbegcekbibibkgfidfekbgegbddcdicekggjijiifebbcbkeddhdffdghgbhjhdckbgdccejidbjdggjgiggkchfbgckghcdfjdjihjcibecbdbbkhbkfieddfifeieejkbiffggbkkigfgdbbgbbigdegbcebjdfffbbgihddicbcjggdfbjfdgkffdbkgcddcfhbkfdfkbkgeiiikbgdcjeifkgdjkfdkdgggicjkefhdbkkdkdkgbkiekggjiifbhcbiicbbhejkhccggikgebdhghfffgjjcedfdikjiefjbkcbgkfgihghbjdfhfghjdckgkcfehichibcfjdkbjcjdbhbbiecjbgbddhdfekkbfbdhdjhickkcfbddfcfkbkdfddkcgdccgbffjffgddjkgehkihgkjjicjdbiihbikijcgfccejgbejehiedgcfkfjdcgefikcgebghkjjicehjjhbghkdgfgjgecghebcjjjcgkhcjccbfbhfghjdbejdbfbjbbdiicgbejjjbkkcikbfbfbiigkikdhcdhiddfjkcbeecffkbdfifbidicceibdfegjghicbkhjjiffgbifhbhheikkfjiekibchgfbihkfkhgjckkkhfjhbhikighciehhjhdbhfjkfdjjgkkgkdeckiggcbghfjjeicifedhhfdcickjecjhfdfgehkgicifjjgdiiijechejkgcbkhkjeikkbkggbckjedcdcgfjjkffgbcghfcbfiffecbikffdfcehbjhbbfddgbhkhejcgedchkcidebihcggkigjgcffdgjccgejijdicccbgfkbkkkjjhhifihhecjecfbbibbkgidfbhjdecijikdeehfchgchcicihjdjghdckhcbijhjjdjegkbkieihbhbkcjhbfdehcjkfiedigchjgdjkhckgiegibkgggikbiigeefcdbfjjhkifhicghkhhgeckfbhjfgjbgbkfgjjhghdfjbiciiccjeghchjffbikjdbkhdfkdbcchhgbkbkddkbjfbgihcdcgdbfihijjjkhbfdcdiieekjhgjfckjfbgfifhhgdhbihhdfbjfkkfedhieiifcccchidebbddgifccgkfhdbgbbggggbgeehijgeicjccchkfcbkkjfkkefkjhchgffkfkbikjghkekhgbjjhfegcjchkghddjfididdhgbkhbehdchfbbdijicehdghcekkfejgbffegddddhjifjgcbecgjbiiechdfbcidghifkbghcddhckgdhgchbefhcbcekbibfjhfgkdjhbfgdeifcegicjhebfciigcdfibbbjijjejdhieifhkkhibhfhkehjjgickcgfgcgbccfgkfbebkdkjjfegjehiifcbihbebddibhffejgifjdeijgdibiggkedkifcfcjddigecdbfekgjdekgbgijgbihfdkddihgdfdebcieikgfifhigcgiebjcefgeddhdehgijjddebigeedbicjhjcckccdjgfcbijiefgedhbhjihkdjchkfdihdggicciehgjckdhfgkjkejhjhebjidfggefhcgjigjdkeichihbbghcfbeihcbcbikcfecidhecgjhihbfdjejfgegbkejbkcbihkkffiieheecffdibbebhckbiffgcdbchecdchiffdijffehkccgbgkigichegcfigcchcbcijjkkfdbhkffcegfbcijgkbjgjgeibfhikfeifhjkekikgcjgbdefgdjfhjefcckbiijhgfiiddbfdgigfkkhfebkhfediefhjckkjbhkeecjkdjhekhcgbdehkchdghfffkhkejjcjieekjbejcghckcbkcjekhbjdfiffbicidfdhikcickidffejbdgkjdbbkeihcgbebbheehheeikkjfdbkefjggbeecfkkbheekkbgchdbidebfebedfiefeckjgcdeckgkbekcdkiegkeikjccibkiichefgdfdegdhhhdgefifhgghdjddhcbggdejjbckcjicifbceddkfekififcjfikjhhekjkebegbhhcgdkdgicjehjhbkhjjjbefkgbeefigckgeibbjejdkfeiifkgchcbfhikficbdcfdhecgkhfchjdejbjbfciffhebcihbcifegjfgiegbchdgijhkijihcdkkhfccjickkcbhhffjchicdgfkehckdiebedkddbggcjkbckhkgeedehjcehfhgdhhkdbgigcihgidhfcecbieegdjddfffgjdhbgckbkcfebhgfbhghdjcbjffikdibjghbeijgcicekcgjckigdgebegcigbdcfhckkdciijfjjffkhbdfbddfkkbcbecdefhjcecbhgdgfiiichfcjkhkdbhgbgiejgdfgekdgkgkdijbdgdbcgidjbchehdefffbgejfbcggiiiccbhekhcedbhddhebkhkgdgjcdgjcbhkjecbhedikbgjfjcgjkhiighfgbgbhgdgebfihecfgikjdffcdjdkfijbdbhieefkdehkejdffgeddgifdfigdfbidgeedideefckiebgickhehkgfecgibihdghdckhgjhjbeihedgcedjceifecggjckejbccggehhjbgbdkkieedkjhhcbghfhgbfjcdkdifcjecckjhcddjikjkkkggbbdkkbghcjkddidjgfehhicbiegcbbieebhjjbcbfifkgkbcfbehkkkgfkccjfekbeckcbejehddkihkcgcbdiidjjcjebebdkbdbjijcciffeffjghgejkefkkcbfbgdcgijibjhifjhbkdihijgjhgdjcgcchiiedchihhgckjebgghkfbehcejifkfgkhbbgfkcdkkhcfebcjefijcbggjjcdfkgchgigjeeecijckfidhjhefbdfffbgkjkkdbifhkghjdekdjebecggcgchcijdiikckfgibegfbcckebbhgkjjigkddfkeifceidedgkdfgcfddbecfhhjikefcgcickbjkfcgjgfcjgghcjehbfbbkciffdgegcbcjjkgggbbjdegfgkjhhfdhghjcbijhkfiiddhchfkdidfiegkdbckeckigccfjfeighbdgegkicickdcccdjkkcijhidcgefeffcikcidbckkdggihbfgdkkfkjhefhdkeedkhhhbgebkhfgdihdfdicihkehihkcgfcikigbjceckdkficdgdfdhjcicjkjjeeccgcjkccebicbckbcfjjhbkibfijgkgfkdbjhjkckhkjjgdfjgbibfkbkfkihhhhddbckdecfjejegfddhcbkegbjedkfkgbeeckfbcjcegkcehdcdcibihbbhjidkjgffkdjkbbjejibjeihjdgjdgchjdhfgfkbdfekjibcjbjcdfgibjdieffdcdghbgffgjfeiigkicbhekgihehdbccbidifeegjfkibefdigccdchhgjffefbedbfkggbihjhkbgbiccigjfbhdjckkejjjhfjgjkikdgegjfhfhihbcjigifdhegbfegbcfgcbgeffkfiegdgcifigekbfbdibdbgbbihegidiijjeihdcgdcekggbhfbkcgfchcfeffdkjcdcbhgfcibggchkeehddiicibhgkcfcfecgfckdgbegkgghkhiehhjfceeghhddchefhdcjkheccdfgekikfkefbghkhbbbfbhccibcfjceibeffcccbjkibkbidfhkdjifkifdighggbgdjdbbkjdekcccifgibbfidckchdhdehfejbhegecbebcbeedddbcgdcfijdegjeddfkdhibcehhhkcgcffcfbfghikjihjicjidkkjjbkhiekjgffekihijdbkccdkecjhkbiicchdjfbecefhiifjkehjdbfdigiekikijbckkjkbbifhjjiijhikkhhibijgbbhkbefkeehehhjigkjehiggbdbcbbgdfhgkhfhebhdgedcbjkbeikcihiieiecdfggdiidfegebdihfikiiihcejdjbbkjehgfficcbhfbdjdkjhbgjdgbhggedhhkdfkfhbbjkdcejijfecdgiejckkdcjhdcckhcdhkdhgkkhcjhjgdfedfibedfeekkjfjkchcbebfckdiefgedcbgbifdjkjiccbekcgbbedffdkkcibghifbkckijkgfkhikffbcgchffbcfckdceickgcikcdhhgkgfheecjkbgeekfdkhhjefbcbgjgbeefgfkjjdcgdhbjckdigbcgejeickebfgejjjjdhkdcccgfefhhekfgkhkjicheegikiiibgjeiehedcehgikkdcfihfhhkcjfhgckjefiigbgcfebfigeedkdekfeccggbbhejfjcjbighgfjjggkcbjgdkjigjfcbifhjgkihebcjhkffccefdkifhbggjcbcedickefekebfigikbbebghgjekegifdecfbhidgjidfkbdkfcjjijcjgikjfgdbbfdjfechffggedfbegfcbgdbgffgkekibjhkfbhbffkcgigfjibhbkhcicekffiicddfdidjchfdcfjkkccdidfckidjcidfjihghfdjkdgigekdfebfdjijjgjdcbcejifhgfgkhjjfkbjgdgdhdhffbhjcdikcebkdjecchichhidfjbbjkbbhgddgicbdkhckiigekddicddkfkfidfcgbhijckkhhkidckibbkdcjdkjccffehfkhkgihcibkkdccfgjhhkgichccbdfjfbgbkegkkfbhekhkedhdgfbgiebbkjfdfjdcdhcjihfdeegfcgdijdeikjibddfbjkfekkijjcjkigicfcdkcfggeeeejigecjjjfbigefdfbdfhjcgcbfibgeccbikhgedbigbijjkghichfbgdjgijdcggihbkffiecbhdcfegkhjjhhdfgidbkkejjghjicgekfecgehhhicbbbiffikihfebgcfhkegkhfhfkdggcgehgdijkhiekgcjjdciiffijbcjbjfkfddebebijeghjdjjcibggkccgbgkjfkebbgbigjgfkhjfgeheebeifbegbcgfcdjcjccdjjeigbkhggcffihkiikchbiebbbhcbefhgkcgdhjddfkebiefehckhjcfhejghikdedcdhfifffcifhjeikideggfjebdhbhfkhijcghghkfbbcijcgkkkgibgkibjdkchcjdhedkiekhjheeeidjhjggdbkdhkbbhkfbgkceckbkkjdjhgjbigefbigibdbdkjdgfejdbhkgfeefkdjccbgjjeddbgigiibbbdifckbgdfbhigjejgiekikbcddibeeididcciikfjbbbejekbfgbdikjikhbigbdfidbcbdifgkedijkggjdbccdffhfhjkcckbicbccidjfkigbjfcjfbgghcgebfgdddchdkgidbdcgijkckihbiifiihhhdegbbjkefjkkhieciijebdhghgeedhccjiihhhhjidfcgcedbeeffdjfkdijkbefiiikikggidfhfgggcgidbhdddbihkhjbdfgjfddbkhjdkkhdeikjkkhfhiedffegjdifjddkgjkeffbchfjhfbikgikkckhdfbfbfbkijhkkeebdkbhfdgffkjbgjdheibjhcdfgbjgfiifjhfkfbhhifdehdcibgjdhhhheifdbhefichjjckecgbecheikbbeebcighefhgeeidjejhccghikjkgkgfbhcdjdkfjkhiichddhihhbfegdbfbcegihfjdgccjfjbdfgbbbggjigddhcdccjdjbfckckcgcfjcjdjhdegkdeedjkejjbeedgejidichgicjfhgdgkjfdcdkcebfhegdbgkjdbjjfegjicjbcfgbcjhkeejfkhbcicjicjbddedggjbbcfgbjjecfkkdigfiigjjeihkggffffbfjkjkidbchkcgkjkeehcjiiekkbffgkjgjeibfhjjdkkhikjdjgdikfihffjdeddbgehefgfccdidbibiihgefikceihfcffgfijidhfjbhfgbjkieffjhchbfjhdkffjgkicfgjjffhigcbkhbebgcfbbgefkbgfbedfdhedhgebdikghgkedfghcbgieikccbcbhjkihefdegckbjdeccichcfecgedibhhhkdefgfkbhckgkgkheegbheidkbcchjicdddgfjbhfjkcikhbkkkicdfkjeeifeihcccefkfjckbejeihkhiheiefibcjgibhgifbehjjjhjjhbiijkhjdkkbiedikcigeiebgchjhehfiebgkkfcgekebgjhdbiichfeikgkddgbcjcfiehekeckffkibchcdbfbhcbciejjkdggckchegfigghehgfbdidbcfdiijkgiceedicickkbfgggjdjgdgcbifickdkjddkfcbehdbkbkhghdeffbddkkbhdfcbbbkiedjbdifghgdbhibdckfbdeghhfkjbgedhhgdjhbibbjdjhcjkfbhgigbhedgbikckcekbgikbcgickihgdbifbhdjkhfdiibebbkhkhgdfcbfffbjeieibkedfhihjegghdejgdjkgbekjfdijdddkedejfigegejdgkedfkkfhbejbjcijddcfdjjejcckbiejhbkcdhfigbcehgbiigkceikdghdfbekhfidkiehkbjfdkbbdjcjcjiigfhfcebjbheihcgbchchhkibdehkchcbfehikbbdhccjigdccgjhedjfchcbgdfhjhhdfjfhghebbcfhdbbkkbcbfgjjejjeehgcbjejiebcehkgiccgehcdedjhbcdeddhffhecghfihedigjfjgdibfhgdgekegjcigfdkjfjjhekfdcckcdhdjcijkhdkikkgedkekbfgkefcdikcbffdhgjigikhgehdgchbgdbhkdgdiiiibddcjcbkfkbjebbkbcbkdfhfkiccekjjdjjfbfjgfihbcbgigjcgijkcefbddfdhhihckhejkidcbfdbddhjkdikjgbjjhfhjjeidgjfeidbbfjkecbdgeekegfgfhiibeicefkjedcgkjkjhdcbjcghefihfcbgdiehkjbikkikjbfjfcfdcchfkkjeidjbgfefkkbdckebfbkjbdbebdbkijhgghkbghhjchdefffbhfhbjefjdjjcejebefiefbdfkjghbfjdehggejdhgghkjfcbdgijkdgjbdkhhifebhkkbcdkkdbkbhgkiggijffjkfbdigjgfckbbgfhidieeefjgjdicjhgihcfeffbkhigjifbghcedfckeichggdcjhbbighigchcbjbhebekhehgegfbjggbjggkjkekfkdjickfbfifeeeciikifkeebcfcefbhekijghbfbjhckkjjfikghjkidbgfidibjfbgiejhbgegfkifijihbdghigieijkicifhgkgkfebjejjejdcidieijhjdbcchdbkhikhcbifeijekbckcggfiebkdjkkgfdhekchjckgbdhhegkdkdeekikkcffddkigfffjhjfgiiegejkgegbgffhgchfdcefcgbekceiibhbijbffkkikfchegdgjfeiebjihbecbekfdciidbbjddckcjbhffdgddbcbghgfgcbfcbdfghhhgedfhjfgkfhjiibjebffiighkidbiihikhjkdggdikcffhbbegjhkedcfbgjjekddecbjcjdcdgjhifiifbibhgkbjfddcedfdgieciddkdkgkchgkicbihcejdfjddekhghdgbgbfhghdgcgbfecekhdkhghedcejchjbhchkhckhgghbbgbjkfgjcbbiichgkiebihfdhkkkjjhjkdhgdbjdcfgiffckkkfgebecfhjeckjhegckcdeggdibfhfihibecjhibeejgdijckhddijbjedhedekkickhhhjigfjkiffdbdbeibdgeehjikejgjdbjjfhefidgdbbidfjkiebhdkbgjkibgfkfceicfgjeffjkghdehhbdbccgceciciekcgdegicfhdkbfidgbkhfdfedkgekbegkkbhcffghkchkgddghjjbgccgjhgcbkekdcdfggfceidkijikcjieiijefchhjghjbidfjkbkfikkbecbejdcgkecficbjgghchjfhefcgjccbiifggfjfdkfechhdbgejkfckiefkikbjbfhjiggihcbbjfhhkhgkkbhffheicebiegihicbdbjgicgibecefkckgcfikdkhhcjieddkfffhjihibdibkgfcikekfdcidjfegejjjfjbkjdbjgefhdhciceedkdjgifjcgcdejibhjkhkhecjhfjikbbbdfigecchghbhgeegbfgkieebhihidhjdifdicggbkdghkkfkjekkhbffikchcbcbcbceeeciebiikcikecbjgdcbdfbkbjgjeghjkbdihhcfcidgfgfejibhichbcgbcibbjjfibfeeekffjgcbfjkebehdegcidfbkkeeifghbibhgcihekbcjkgiigfbbccghcgcddffkdkccbfhjkdjdggjkgjibkhcedefjccbcfbdeegeeghchhjggfbkkekdchjiebjjgjecifhjbkjgibjhjdbhhiejbeegijkdhfkkfccdchhcfhhdhjcdibjcdegicgddkddfceihgdidkfekcbdbbdckjiihccddcdgdedgjhjbgffkdbijehdhcbijfhidfdhjbfggckfcfcckffdkkckgdkbhcikhcheehbigihekdhkhjgeiikekdgkfdikgcejgggjcjdgkbkfffcechheckbkjfcfijjjdbgkjfcgceibbhhbccbfhbbhjjcbkbfhcdicdbiccikeffeijkkdicebcdighckifjbjfhgjhdickgbdfgcidejijdkhkifbdjefdfbegicedhdkkdifbehhhhkeibdjhjfjbfkkikibckhjfdedbbfeghbdddjehkjdhdcdhggckdcjikgidjkkhgegdjieffgihjgefhkkicbebedcbkdjkbjeceiddgfbhfffgecbjhjehfekfdfiiggjeikjgcbbbbjkkdigfjfbgebjfffhidgejdbhkgbcihgfgegjeecjbiekjgkhfikbcfeccgdidgikgckhjchkfbcfdeiibebdgefbjbjedighfdeejbbfbbhhiebegehcbghgiccgibdkbfbhfjdjiihgehfikbhjfkdbihcejfbkkedhbkhehbggdcdekggbcdhifcgikkdbhfbejfbbkbddeibekfbkhdhdkebefeidghkfjgihdbhfidfhhgfbfjhccfbbkfhjbfidbbghbdbjkdhdhdjjbbgdebedcjkecfiibihkfdffkkbefbeegiiebghfjfhicifchhehfcjjcckejdifbickefhkfjkckgcfkedigcbeibggkkigcgbddhgdgdjedgbbddfdcchedjdjfeeeideekidjcgbhjgidjgkeeffhchhbbhkihcgbjeibehfdkkefeghfhhkbjcdehejegdgebhcdghjcjkjgddehfkifbgdehdgcebkjddkbedicbibgjibbikcghedieidikiecehebbeebhgjkcfjddckjjggfckidejfdhcdhfefeddcjdcjcdhjgfjbgkegdkjehedechjdgeehhffcjhdfkdfdcfcgkbhfbghhdgfhgjhibbigfffcifbfdfkficffihkcckbdjbfifeihfdhhcdfhgcjefkgfefkjgichgcgihkfcchgidihckhkkckejgcidjichddgjkjcgkdciehbkebjgdfjiekhijjifiiedbefckedgfhddgfbfjegebjkckgicjhehkhiekgechbbccfbbifcejkkkedbbjhbbdfebkdikgbekfchgfgjdbjgfjjgikfbiecfcjhjdehbkjjbccbgbefifgcicigekcfgikkdecdjfjdeikedbeicikjfbccejegfecgbdhkeffghckhfbcgbgcigifgbkghfifhffigkebfgfcgkdgbkfcbckgegdbhgbbccjikcijbccjkdigbehdkhbeedjjkeigbfhehdbbhkfgkgeefbjcikgcfcgjfbffijjkdichfkjgkbccjdbgkffbegiedfcecgbjhhgjffkgdhdhdigdgkhcfeefkcjjbhieikhchcjhedhjddkefcdbhjgkidhejhfdckdbiefbjkiegiggeeihddbikkeehkgkdcfhchfidbhjkjhegkfeicjheebfjbjgekifkkdffdjiikgjeebikihbebdcihekjcjcfbbdhfgjikikhdbdhchegkkbeijeijbhkgdehgcckkhbkbjefjcijjdfjcgcbekjjhifhikgdcfeebkbkgikccccggbehfjggjjedbfbgfhfgkiebfjdkijhjbfbjcggjcckghccccchhdkbidghjeeedkgcbgbkhddgecfbgehcifkbfhkicbcedgjdicehhddfkbddgecgbkgedfceghifhkkhgijdidbfkkdjkkehdibbgkkkbkhbkhdbikjjbiiffdhkkdhbgickgjbegbfechbddffkjikdcckckhdfbcghffkdekdjeiifbfdidbfijdgdigcibbkecfejfbgcgfgkdfihgkiffgdkcghidfdcjdihchkbecdefhekhbcjjfbebkihbiejgjichhjeehjciiggjfgdibhidhhgkigedgefkibjhjiefkieeiejghijfihcjbgibdgfckjgkgghjkffbigbdiiejfgdjcfeddigcgeifeckeeicdikibgbjigbkfehbjfgifekgikefigbfiikhbikgegecgeceijfgghejeihehhidebijdkdeecghfjifjiidegbjjhehkckhdkdkhcejdhbfkgcjgfjcggcfjkcjdckbgkjigbdiffkiebcifjfbkjbficbbdhdcdhgejhjjcibkjhhkkfbfjggfkieehdbjeddbkcicdkgfegcjiddchccccidbikhfjijfjkbekihieffdejkheddihbghbcfgciegcecdkkficjcfkfbfghbhejfeieddcjggddfegbhjkdccbfdgkkekgfbidfdedefhihficiifdbbhkjjhiggeggdcjgddigfigefgdkjbbcfiikbbbgehkdhfjibikkfiiggdfgefhfgcffcdeghfkkkbjgcfcdgigighkccjbkdhfkkjgbhjfkgegkibcedcbjghjfghejgdhccjkikebdgeefekggbekeeghbffhdjideefibbikjeeedijbhdkfkcjhiekhfkhfbkckchjejechgebdcffegkjhbeffejfijdffeijebcbcidbifdejebkehkgcgkkijikdkghhhgjhehbjckekjikdjeiejbdceichihcfjkddfegibfdffejgehkgiedfghdecibcdhdkkejddhefdijjcbfkjihhegcjkcefjcijkjdkifjecibbbbhikecdgejgkgefeefgeggighhkjhedefjeeejjdkbijcifeeikcgigbcbfgkebddkkkdchjfeccfijihcdegkjecjiegbhjhhfcfbdjgjigjjfeeighkjgidggbicedchiibhbgkgiiiddidccejcfehkekfkjcgcgcddfjcieghbdjdghechghfdegikicjgdkjbhcecgkfbegdgedhkeiijihciekidhgkjebbceihkkibkgbbjefedjdchbikkbcchfcjhffkbggbgcgddechfkijfhgkjebiegddidkegihhcdjjjddjdekihdkjhjdjdkigegijfjhjkgjeidjjhhhebdbgkkfhhcbjchdbgfeehcggdcbgjeghdkejfckhkkgecdeebfkcefjihgekjiggkbddebijjgddcghgbjchcdjgjfhkhghdhfdfgkkfghkkgjijfjkigbikjhiifidfdedeeehjdijgdebjjidjicjedfgkijicjefgjghjcicikikgdfibehfhjjdcgjgbbkjiicbfceikfkdfgeekjegecdjgdekcffhfijebedceecdihdighgjcbihidjkedekbdeeffkdgkbhdechjfdkkkkifkcehcbdkebcjicgbdcbddfejejebddfdgdfihfkcbjdiebbbidihddeegbjcddfgcchjbjjckjfhbdfigcjhgbhedhgkkjgdghdidgdeicekicefkhkbdichekfkifefcbbgikhieieihikdiggjdkkgdcdbbkgkbfkkefeeccicfecdhdgfdbkeikjhiffdhdikbbdecejkecekfbdfkfdibhdfcifkchbikfdfiffjdgkbkhjdgjefcikhchhdkkbicfedhkhbdkibcfbhgceibchgidgkjefihdhijgbficbffegdejhdhcfkeekifhcfdghbcickjikkggcfbfdjhkcjgjdiijkhdjkbihijbkcedcijkfjggfjckcghibdfdebbhkjeebgijdbkkhjfbecfjkghfgeghbkehjcfidfhfiibdhgkcbejeffdjbgjdbdkhjfkgeicbfcghfgibicccidcdjbchgbeeefijkjefejjcgjbkcfbhdkcihhgjhckegdfbffjbckbjedbjgigejgecghkikhfkbggkfbihkdcfekkjjjdhbgdbcfbggjigdgkcjekgbceechdgcbifbifhfifhbjgfhceeijkfihdfbehbekkfdfihgdejbckbifeggjifhcgiffhbhijjdgkiekeedidcdjcdcdbigieefghgfiggjcedhcjhidbhgeffegbjhbbjjjejcfcdekjikdfhjibikffhbfhdbhghgebkhffcgjjkfggdbhgfifechjbgedfgeddfkggkkjjhikhcgkddehbghjgebkejjjbeehgcedbfcdjbfcibfejgkbbhdgedfcgkkdjfbhhdgikkichfhgkffkcjkehgjbbjkcihjcfhgihhdficdffjcfhffeighgeifdjceggfcehkbhdhcfhjefdgekeffjgiggjejhjedchigdckjhbgcjjjhbfeefjgecheigbbihifdjhegbjfkjggeddfeckjcjibdkiebfbbcjihbbdbdfidcchicbfgifidbgbgiidhbikfckefcggjdffkkgjkehkcgjehikibjhcdhgdkjikfjebigjddddkbjeihkhhghihhgejbigfheefkkehejegejcfdjddkkidjckcgbcfdbedgedbcbikkhhiedgdfjdbdekdgfkjbicckhffbjdbkekeicdbfckkfibfehekehjbihbikfiejjbgiheggdgfcifbcbjibhfkikbjdgdjchjcbbckjhehkihddkifeehfigcjigchjjfhcdcdfckegjdjkeedbbhhbidicgkgggdggfkbeffdfdkhicbhhjiedhefgecdghjidikfjcikighdedggbhdbdieikijeciccjcekkgfbbbifjegkfhghijfdeiihfeeijdbhjeebghcddkbchcefdjggifccdcjjehcfkijfcddjdkhcjcjgcgeghiebhhcigkbekhighjiickcfkddjijibdefbfeibbjfheiifcfbfdghbifhdjegejekbbkcccgfcffjiiiggbfhdicgcfkefjiccjcbfjckggbbbeegbbigiifhfgfjfdbghchikhdigjhdkiffgkcfgejejccbbjfjibbdcidfikeedehcfkfjckkbedgfjghegeekichekjichkkgggbegbdcbdfdhgfcigfgkeikdhhheicjejegkhjcebhckgbkkhkkkidgciedkccbbkhikdccfifjddifebfigccchhjkgeeceidjcjhhgiedcdbihggfjgcceidjbhhhkghjjdicihfkefgkbdgegjkhehfdechfdhgfgidibghhiffjkckhiiifgeijgjikgejijddkihfecgfjbikikfhjfjkhkkdkchgicjfcfhjdhckbfdbdiccgdfibjgdjfcbihfijhibfejidbfdccfbhckcjhkhjbkgfgkgiejifbjcgjbhdcjjiibddkidbkhfkfkkieeikbdgjjeefeehkbcgkfjfbcdgibbcbkifiekghfiiihkfbeiideiiedgkkfjkjbfcgegjdgkebckhdekgiigjjcdigdehkjfcgfekbhkgchgcfhekkcfdjjgbifkfjkbddeeekebbhhibfifjegfjddhcdkejjdhdiikcdckbkgjfekcihfifdbhcddbjgkibbjdkghgkcdfecihjkhcdedfehfefgieejjbgcfibibcjkjhiefchbgjggffkjcfibhjgiicfbikdhfjidfkfigchegibkhckkkkhidjkkddbghekgbfbekdgkjghcfkgfjfijejccifeiecheifdgidbgejjbjegckggfkecgghcegebidddeecbbjieckjhdfcgffiggbkcckfefhhcehjihidfhecifdihbjddkfejhicdbgjkcbgfjijgcchhkbgckbdkkieefhihgkceccgfbbkjgcjigkhhhfjjbjjfkfhfgeihciigibghfggjfgcgdkhchhiedjkehkicjgfcdedekgjceheekfghdfgegfiigjidjfigfgfdijicbgigfifebgkjbgjhigfjjfjjdiebbbdgdkhkjfigihdcjkkchbiekdgdgdgcbicefccedecfcifkbkhehgjfkefkdeecfgcgibkbbefhhjfcddjfhkiekbddkgikkhhcjhcfidcjbbdfdicificjghhkhjcgjibiehijkijbefegkfbhifckdjjefdjkbiieiijcghbeehehbbkfbdbjfkkcdgebdbjbccbfchidjjdebebgkjgkbhcjcfhjbjkefggdfhfdefechhkhgccedkejdkibbdfccgkjfjhcejhckcjfgghhcggjegfjcjhkbehgicgickehkdjkdgejhcfhgebcjifegcfhbijhghekgedddkhehcjegdikfdjkhkkhbdbdjikeebikegjgkgdkhkjceghjjhicdjdijjbikikcigbffcbgfkejiichdjdjhgdfgccbjhfgeicddjggjbbjdidkjfkcbbhbcjgekgfhifhkegbjgffhkbcbgffgjibbfbjhbceiekdfefkcbbdfihgcekhjdkbkhcjfhhkgfckdjhjdeceiciikffbgjfebgjeggejihjehkffhcigieebkckiihbdgicfecddjedkceibkjijhgfcegfhfebdgeibhheddbecdggcfdifhckkcgfhjkfcgdcchfbihfbheifibgkbjeefbjhbfekckfbfekhhffeekekjjihbegkhfechihhekhifiejiddkbikbfkkffefjkijeffcbkcbcekhjfgehibijjghchidkgbjkgdhdijjcckekecgfibgdkfcbkhjkjgjhhgfgjiigkdehiihbfjfhebbdegcjfhkbghdfhcdkhkfegkjfkceghcfkdcdhijgfigdhkkgdichbfebhbhgbdiidbjjcbgcbbbiggeciefibkcfibdbdefcebjecifebggbhjbjiefiijihjbfedghfeeeefgcgjihjfcehcghcfhkkjgickkhgkffkjihjkgidhidheeeebkgihkdbekcbfdbjfffjibbkjejjhcfhcechikjhgffbjkdbcgikccjeikhjgdfjiikchjfjiihgbkccbkcikhkeddbccfdbieekcjdbibdhkibbkbkjcfbehdegdekfiighkekjfeecbgdebfidkjcefieikfcbckdfkfbdjjkgcccfgdddjbbecfeeehfbijjbbehjcijkjcicfciikjjkkdejehgccjjhjkgifjdiefhjcgehfkfkfjifkkfkkififckgjkdicdfhbbgbikidibibeckhjbkcidffghhdjgcjfkfbekkjecjjkgiecickbcijceihbcbghjhffbcccdgejkfkhkfiekhhikbigkfgcdedihbjfghgjdgfjhbfcjgdhhfigjgbbebkjckjbgkchghfikijdjbbcbjkdegfjcbgdbddfihifekgdfegfekdiiejdgkekjcdjjgfgghccdjkbcghhckfbckkdgicfieceehidgjkeibigibhikjkjcfbdcdeceegjbbfffifiecchbigcdgeghikikdiekiihjbidbjijjjgcekdeckkidkhibkjiikighcggijhhdhbkgffddbjhibggejfjkcihfkdcedbgdgdhbicifbdbgigkfgedehbegedkgihgikkdfdggigjhkfdjjiifkgifchckeiidbbkjhddebdihebfebbhiekggidggcdefbcfjegbiegjdifbgjkeieigghfhekihcihkeibkckchhgdkgjdjbbcccifjdfhicfbhebhdfddeckbehbhdhbcieebkhjhkciheibbkhbiefbfjhgkjfjkhjgfddjdcheiebhkbjkbejgdhifcjicecbbkdfchfgkiejbdgififkcgidjdgbhdhekiffjffedbeehebdgjeifdcbfbhbhhdckibbjkbhkbhkdchkfbihegjfcciccgghbikjfdkhfdbjegcdhehdbkbceceejchgbgccgbiegfbkcghckkbfeghdigdkkbbgiihfiddkbibhjgekcggiefbiijkkehkgcjfcjbjjifcjhkhkkgfifbkjcbfjecckkjccieeehcdijgkbghikbdjdefihkkddiecicbdkdcigdkhibcehgcdjckfhbkbekcebdiccgkfdciejehjkeiehjjjdekjikkchbfebccgjkijgdcjckfijfcffgdijehdfbdfchjjkbheigghhkbkiidfjijigggfejfghikbibdkjcijgidhdgibcjbhcdbgdikicidfcjfgjffifkgbfdjiehhcgbkcjkdhbcdcicfkgefgdhckdeficcjijbckjekhbbdjgdfjdhbdfjdjdfhjigihjeghceecijiechjbbijkefdbbgdgghbejhjkbkcjckicckddceedbigfgbbfgffhjedhgkfijbbdcfhdddcffjkfbgccjbiihjbggijbcdjiddkdejbhdiebdgiekkicbefgkbjejbbkfgdfiicjcihjgecfgkeceefebeehdjbcehfkjeifdbffjhfighjijijfdjhggedkcdjdfeedeijjebfebebchcgifhebkkehgjgccgbidfgdebjegiecgedhgdfgkcjbbebghgefceiidhbehikjhbkddbceehckjbgjjkdcfdegbjfbcdebbiikgkkifjkdbkbifcighbkdjhchikdbdhcdbhjebkjikcedfihickhjfgjjkhbhbejdkbhjgfdkddhgeeiigijjjjbkjhjgjccikkgghgdgickchfhhejejgbbdkfiicfhhfkfjdihdhejkhfkgehjighfcebccjibehikihbcbdccgdhcjgfhgfbbkjbkfbfjjekigejchbjbgcjcbehikficbfddkfikeibddeckfhfdifdhdfifkeggjkidjihgdhjdcddfddgcdgckdcihjkeiggjjeihehdeheffjkibjkbefhijiificjekjjdegiebifchdjkcfegbdjiecigdifcijgeebejfbkbdigdebjigfejbehkijccekgkgjjdhkcfdekejgfbfdidjbkjfhgkkfkdjibkckdgkebkhbcjhfgdidkcfebhekikhfdiiibikdgjbifgdchbjjdbidefkbgghkhkfjdbdghjkchdjhdekcccjdikbfkifgjgjkhkedihkcfhbiiiggdhhbeekefhfghighhgdghkbcddchjfkgcibicejehcjkhkbghjbbciffdggiihgcdikkkjcfcigbbbbkekhkdccedkgdjedfkdfjfjbkicefgiicbghghdejceefckjjejicigjkkdedhbcgeijikkfdghgcgbgigbdkccbiickjkbjkhebfiickigigdgcjihdhfihjfcbbebfhkbhbfggkidggdcdkebdbgkbhkiicbbdkjdgdedhccjfdkkdcgkfckbkcckkcjjkggcijejiicegcdehifcifbdggjjgcihhhfcjgjiciebgjeiifefheejjehfdgfbhjdhhfggeiiijjcbjecddjfckjgckdbbjhdbhbifbeijeefgkcbbhdhifekedefeikkhfhidjcbcikbccjccfhkckbkejbdbgehcheikdiidebhekkihjfjkikjegjcbffebgbidckhbhkkfedcgfibhjjjiegkgghbcfidfifhfhjhbggedhddhgekkfjdkiggiedbghcbjdkkcjjfjcdeekbkgikidciegdffjhehgcjbhjffdifjkjhecjjkjifbejiichkbikhdekcgihgbehkechgcfhhgfcbdhcjbjchkijjhdfgjcfebbdfcfedigjjkhjgchiegkgcfhjeekhcikijegdgdhcfibedbbfckefckgieijedhikbbjdfifbebdbbechhefihfehbhggidkjbbiigedhhbddeiefbbhjidciidhbidihccbibccdkiigdiffgfkbfkbkghcggchgkicbchegdighibeijcecfbfckgehgibhdeidegdbjjccbkceidgcjhdfgcdgehghcijhkkcifjjkjbeejkhhchgbffefehbgdjkehkjedehfcbfcjheccejjgejdceeeedcekefhbdgihjjhkckicbcfiebkdgdfgccjcjdiijkdgbhcfdbbjijgkbeikbdjdcekjgihbekeckkfbbiiecejechbbigddedjhhicddegkcbfgjgfdfcbdbkhbiecjidihbbddjibgbdibhckfbdgigbijidfkddcjbcchgbkckfhfehieeeccckihjgdibgdgihjbfgfechkhhhhgbeegejfbcijjdikgefddeibhcjecfffbicejghkgbfjgkjbgkhdgdhececbihidfgihdkgheefgkeeejbkhgbjbfkjkhifkgcigfhfbcigbkbcefjhfjegddeicihdbhchdfgcbhgckggiejdikddeejbfdekheedgcibgjgidikcecgijbdcchffdjicjkbiigdebbdffgcddkicccdcjgcjggiddfdkgckhhgddeijedfdehgigcicbhgbkcdbcgjffgiciebhbfkkkckhcfkfhhiiffhfdhffbkgdegjbfdbfjdcefgfbjidkcfbkjcfhgfijiicbkgfcccdhghkbihcihgjbdfiifbdkegjfdijdhekjijcddkejiiedijgfihbhkekcddjebjhheefbjfeffcihcbgjhekdbkbdbdbificghkhbcggckjcgfbjbiehgicdkccgdefkdckgfdfegddhgbckbgcekeheccijdkjeigkbbbiecekeiijkdhdbbjcejchdckgkbkidgdeikdbiihehghbbiidfijifjbkiddbgekjgjjbddjddbhidchhdgidcfhbkkgjggekihgicgfefbfbfgfjekckebcjdgcgihcgdcfhgcigfdbhfbbdijfdggcjbijhkjcdekedhbjjghhbcghhfbkeeeefjekijdikgfcbdbdifbfeigcgbegdhjggchjfkhgcbiijhhfbkiccedfkkebecibjibdjeciegcgdifddhdfjjggdgficegbkbecikhkfhdgkhefchcjkjehgjdeeehkbddeddfccbjighgdidhcfkidddfgekgjidffkeefkeekebbbjfdedhcfgebhhhcdhigkikhjkggjehbbbiefhjijfhhdckhbbffbhjjhfiidjdjdehgecickhhckibhkgdcbciceibciggkikkcebkdgdgkkidgfkgdhkihhcdhdggkcfjhhedkgckcckjhcdcgkkcggeihedffbcdghbidkhkhgbfdbgkkbdkdfhefcjfccejjgdghjfkbejgcbikdccidiifhfkediedggicdbciibkkiifgjegjcedejjeichbjjegchffgdfkdhbbgjhcgihjckiehefghgeeedejdjejjhcebhkhbcgdjcdgickchefifecbfdeecgkhedeehkkdcgkbfgkcejfhggddibhgjhedjfcdcchdcgfgcbjijcbkjjcgdkhhbgehkbkjbbdekfcifhkgbejjgehkkchcbdbgcchhbhekffcgdibegfidjkfkfhjffggfcbfekkkjffgdbjkjhdcfjfdbgeegbbccdbkggffjihhgcjigcbijkdcfdddkeiffkicebcijbkdbbifhebkfkeggkdjkekfififcfijjdkjhckciicfggejfdejjbdbeidijcdkieiegdickgcdegfiffbkkibkeebkficicgfdjdigifdddbkgfghiieefjicgjkiecbfhdkcjdegckcjcejckfiekibbdkgcdkcebkgbbbkkggbkidhfhfddhddgceghkijcehbcgijgbhecfjefjjekhheeeffickkjigkekfieikjidhhkcibcgbhffighgjggbfkbkjefgidjfkckiibdjjdddfidikkkggdfkchekjcjbbddhkdikkkhbbbkhhjbhikddgbehkfkebicckfifkgefbedgbcjbdbjegjciefjdbddgffhecgfejhkcjibfdjckkcebjkeijjgcddcebceiibfkhbhkgciigdjfkjfbfjfdeggchjcekddhgbeicchkfkdkbhgbjkgebhhidjchhhgfdidbcigghkhgifbbkihciihbbhhjhhkgbehbcbdheghibfeeefibdecjbfbjgidbifghhiejfdbkhbdeickkfjcdegbfgbkjkbdcgjkgcddiiifhibcihjebjbifcgiifeihehekjhbekejkddbhbfgiifjhjddhkhgghdjdhgdfdkijigfkfdbcfghcddgjikkbhecbfchcfchigfggdeijfehgfjdbieefcjjbjkfhgkecfbikifhhbcfgejjdggehgigfkgcgjefdfffgebfichhcjceijegfbbciiejhhfffgfighbbhkfjcbbhfckefegkckjdegjeieiiecdheehjbcddejecdbkigeejcifeekfgbdbgecgedfeggdjfggeefekdehbjefckdhbbfhkekhjbbfccjefbkdiebiegihiffbkifecegdikcdgbfekfbbcgbdjcdjdecjjkfjgegffcdgbjgedibhjeeehkgbkfbcciggddjchfkkkcjfegkeffjdebfjjfckkifdkfkjkikhgkebbcddfikijhkbefghekhjhbjejgkfkighdkekddcjhjgbejdkhdgeikckifbbiggccbjjkbghhhfdckbhigdkkkjghfhbddhgfccfhiickgkdjhdefkdickggfdgegckkbeghgbcdegkbchjffgfcgdjghhfdkefgehdgdigejbfedbefiijigejjbghdefedbhgbeefjcdfedjjkhgdjefhbgihiifckhgdjbedjidfejdbgggeegjhkhificgfjfhchffhcgejcebikjdhecejbdibfhifbkcheeehbidjikfhfkkidigebiikjigdbkfjgdhkegkgighefccikjdbjbeghkbhkgjfkbjihfbiejibifhkcdfgkikjjfjbcjkkbibcegdfkjkhjdgfbcdcgkkfjggecjbfehhdcfikhgfhgggdgbhdbfiediibbbikkghbcjbicdcbcdcdcibckjbbfgheeicfdfjfcjjbdhgfjgchdhjjdeeffkhkikiggcebfdigkgiehdccifjgdekdekdfjhigfhdgcgbhbgifhgidkceekgffdchddkibkehjcjkhkbcgihhdigjjdgbkcicfbeejhbiegiekhhkdhcbdgigdekheidkcichgbfbfekfjdidcfbkieecfjbhgkfkkdkbfbcibdgkjkjekfbfbeekffccdfjhbjjcbkjjhbecgckidfkjdbggebgdjbkficickekhbjfhdiehijeefihgjeffeegebeifejfhfdebhcjkcdgiecjjgfgjkififchbbkikhkifgifhbdjgcbijibieiiefijjfjjdgcfidkhhjegdegbkhjggkicjigfhffieeicjjfekfhcgjjcfejkhbbgghhfbjkggdghefbhgbeefjgedhebeidcechhefgkbjdgeiikbdfcbjbhdibidkeghkdghechedbbibdicgjkcbkbgeebjgehbdihbijbghfijfjgcghcfjcdgcfegidicigfbcehkicfebkikeckkfdfdedchccegdhgkkfdkdebkfddejgjcfkjeekkfbgfcjfeejdfefidhffhjhdjjgijhbbjceihgdkdigfbifhekjieejegjiehgfgbdgkeicjdijfigkhcgbhjfgeghbjghfjhdibjcbedhdfckikggkibijggjidejcbfgjdghcgcbgjdhbbcebcgkbchjcjekjbgihcbebdkbbgccdficihkgjheiddjkhkffjidcibgfcghhcefjkigghbgkgkeebkkcdjbekhbeekbdhbeifghkgheggejdcieihgbjgjgfejddgbfdbifhhjhehgeibdjfikchkfdfcdjekeckeifbgbgbkkcfkfgcifdfkhdiibddkbhikkfihkbdkbeigkdbfbdeghkgfdhkgjgfhjbbcgjjbfcjeifbdcddgfjfjfiedfggdigdbifegbdhfjbcieiickkegjidjefchhiddggghefbjkghejihifffckdedgdeghkjhhihigcbjchiggkdkejkcbbekgjbbbjbkkfdjjdchcdjhghfjkjegbejcfbkhdcjkecbedhdgekkkhkdbfhbgcbkcihddgfkgdfihdekcjedfhceggffcdijkjfbjdebgebbefcbdijkbccjkhhhihighjhffdfbhdjkgiiicdhibkjbkfkhhifdbhieiddiegbbdbjkfiigieedfjjiecehiefgekcijfjgdkbjkjgiiibhchgkggjikgbkbhegiikhkjickjicfjikhggkkdejggebciiejfbhkkdccffdjkijjkbckbgifdecjikgjefieedcikckgchihijkjcgdcfdddefkfddfigdbiddfcbckiijijkkkggjebifkbjjdchbcfhijefffeeekffghciigccicckfjghbgjbfgbfebjcfcgfbeebcfceecjhjegiibjefbkbkgecejbjeiiiehfbegbfdfckkcdidkgeikcicddbihbdfefkbdggbggjhhiebkkekefcjeikkgkdiikfjfbcekbhjfhdehkkgikkdcjiffhjbcghghekfeecfdgiiigcjfcedffehbjiegecbkiidffjihfdhdkgkddhhccdgeckiigdkikghjdbddggfhhhkffgfijjejidebkfjifedeecffgkdcciikcgihjkkffdjfkbjkhggifggehifhiehgkbfegejhehckdkfgbcchgbkjegcedffigehikkjcfjcbfbcibeeifckgddjhijgjgfbfecigbifhjgjckdbeehjkjdeddggbibdjegbefcbbcbdcedcegdkfehdidedgjebgegjgdgddejkijjghkfdjhdbddjjgiffhgjechjigkdkccjeffdbcchchkgkhghkkjgjijfdbbdcifcgifbkbbedgggckbffedbkhibceckfehgkfkjkdkeeiejidffhedjfffhhjjhfggkfgcgdcdikdgkcgfkekckbbhifjidechdjjfddkddfhfigjckgcigkfkchkfjdifiedgigdeegkideegkhhffeegjdfgkgddheedkdkcfkcggighhkhdjekijjegcfggcjkgiefbhiceedfgbhffejjbkdjdjfbjjhffkjdigecjhjjdfiifedcfbeffgefibgiifiifikjheicikicgjikicidekbcbfgbjgigckedeecbckcjkkeddfehbijidbgebgjdhkkefdkfhkkkdgegjjgeggggdjhhdhbcfidbfkbgkjcigkdeifhhgcjjeikfejhffhkgifibeiedfjhfighefhibkkdjghiidkfgghbeicgfccbgchkijhffbffhciekjgcjddgdfeikdfdccejdgkhjhjiggigfgeekedckkbfdcehdhfcdidebbgcdbihkjfhdkghijhceiehkcbkidkccfkbkfbbdfjdckbhceifebicfdfdjbdhdedebcfdiedkchejkgdedbjgecebjdekjebbjkddgeckjkfgifgdegkcgjfhhfhihjkbbbkegdbcdieffbgbjfdfekjhjdbbbkbkcjhebidcfbdicbfekebffgkgfhekjgbjgdiebdkbgcgbckegibkkfehibifkjbhbjcjcbbeikbhgbdihfgjhhcdkcfhkkjdihhkccjcdfecgdkfggcjchbkfeficfbbffjgeifhdijgebefkkdckhccickiiffficcdcgceiidhhkidcfgedckdebkdcfbfkhhgijdcfcfjeibgijffchicbbijbcjcdebdihdhddiecchfjfidjcjdbiffkhjhhiccdcjbckfidcidiickciiijgbdcfbihiihhddhhidbgjijiiccdcefkjdighhefbdkkjfdikiiefegijfgkcdbdjcjggdeegjggkegkbjdfgbgggfgdbjhbiddbebhfbjffcfeedkhdhdiidfhgfeeiciebbfeifjifhkgcfejkecjegddchbeekbhjfjgiebgfgjcbjehbkihijddkjjbkfiibjhjkbkejdgjhfideekgedbfehchgcehejkfbidhihckcifcidcdefdhdkfkicjgcdjekghcgbhejkkggjdhkkjdegbjkbgfbcgcdjbicjdjjbbkfbkcjhfiecefdefgdgbdbhgjjecbjibhibccffjkbggjibcdjbfdkdkkgdgbececbhidcjjcibfbhhcihccffiikkifiehbjekghegieihdkbckkdgcbgdbikcdigdhiejcfckfbijjhkhfbdhekkkjhkbghfhffdedjbdghekhjcdfdcjgdibeheeigffihdbbckedcedbekhgffcdcgffbjcdgcchjbbiiifdihfbdbehfhdkfjhebbjdbkhjhbggdkbbhdefgjhekibgkekhhefdhdidfbffdjgfbfjgfhddffifjjbbjdcjbhccegkkddfgkkbgeebhfjebdcgejckccjdeekhfhfgigigkegbdhdcehbfebhhffghbdfdbcjgjckdebgigejbdgekdidhgfjgjdjhjkdgcbbjjdjhbfdhcfhcedbbecgeigkgcdhghhecgedecbhgifgbjebejjebjhdffdbehbgehchjijbhhccjkkeeigdbkfdgciehgcbjjggcfffkkhbhgghbcjbfdceehjheihjfhficikehgbibggfedigcjfjcgccfciggjgckekefjgjhhbjcbhdddicjffibhkgghkcedicdkfbgkdgekgfkggkcggjfjjgcfhihcgdckccjkhjbjdeckkdkkcgfgeekjegehddkkeidbjdbckhehkhkjdejddchjfcdgfjhfjjkcgjkbegdekgkkeijhhieibbjbdjcbcffhdjgibdgeiffjifkfbbihcibgeedeffdgbehkegbgbcdkjhfhfcbfjkhffjfcbgikigbhfbjeihdbjbhjgkidkkkcekcedefbbbgdfbekcjfejjdhccbddddfgkbiijedigdijichkjgfbggijdidjfbbbhjckkchgjfbbkkdhckjkgfdgfidkbkddkkjkhecfhdkbdhehhkfcedbijbegeecjckhkbdhjgbjjehigcjjjecibffcdikbcdddkgdjicfjdgehhbdegbhfcdgidcffbjiddhjffbbfkfkhhfdhgdfjkdgdddgcbfcdekiekdjhjjfbkgkccbhbgkdfjdijbebfhdeiddkcihchehghgicikckfhfjkdkkgiddhfkggfekcidhjehiejhkhejgefdjbdhffgfgijhgkgfckkccbidkifgibgfgifhefbjhcbefijhgdgfhigejeddgkjgegffhhdcffkikjkifidjhjkgiifhghbkfegbcgbigfjdckhdkbeehfcdcjijjbcejkdigkgckiebikihjghiffhffkibgghkcjbkijifgjeeikhkfegfdgkdbkeccebbdifgbididfhidgbcfffjdfdcgbijkdkfikdhkkhkhdgfhkddhfgiffkkkjhcejkbdchgdfjefbffgeeciekhbeehfjedfjkibbfijdbfihhhcjgfkhjikegkgbkjebjbchhheeejbekeheihecdchghhcghbfkecjgdeicedgeedcgkbehgdbkfkjgkgigbfkfhjicfjkjihkebgbfckejhgckhgefhjihibgfbejcecdgegkddcighghjeieijbceheedjhikbkighkkckjiiecgjejcibebbkfegdddiiijieieijifegjcjihehbbjjfdhgkdkkfgkcdkcfbdcghddhhckecdhbdfhchhdcfdgidijiikhkfgccbfdjkcgeekcbfibejbdckjjhfibkiiijeckkkfcghhccieggcjigekdiccdhedikefjcifidggjkifhbjcigcbbifjjijikkcegefkkchkiifhehgkccbiggehigfeiiefdhhbdgdihkejgefdibkhfhehegkhhkcjdicjfefjhcjefbeciheccggccgdbbjkidheeeighbbfhfeeibfdbjbccjdbediedghhkhihcbicidibgccfidkgfjddhihiggdgjedbcbekdjkjdjkjehgegegkgfjiggbchkkikccffchkdgibfghdfcbhjhjbggkfjhgejjkcdckjijfeiffhihdcehkcbhbgikkkjebbebjehgkfbeiehedchgejjccbdgbfejkgjceddkcfkickejjcickceihfggjedehbckhkgfjbccjjkgibkedbgdgfehhidkibfhgdgecfdifdfkgkcfdbgbfjhihcehgdbbgdbidkhdkghgfchhdidigedigkekbhgjegcffhehbdkcgkjdhkgfeiebbbcgfbjkkbgefbhdekgjhcgbckfhhfhhbkhkfchkhbfeeiebjihedghfgdjdecjgbkbcciifeheijkebkfbkhhdchgdekdibghfgfbjfddhhhhfkffhkdcgbjgcfjdehbbckdgkbbjecghgcbibcicgkbcfddfedcdidccdhjdkjibkhfbdckcdehicikdbibdbcjhikfheeigehiheifbdighbggjiefbbkdkbehfjeibhchbgkgdjefcdbgfihkejjfbhfeeckfeegciibbdgkgjkbibcdjeefdiegceeijhjediekfhbcgikifgcfigiikikghfegbijckhfdbhiiciigcjgigfefcdedbfgfbfbgkdikjbidhckcjeecbkfikdckgfedjeedkidhbechcghigkkdhkifhdfekfhcedhihkghhbhjebcdhikbeeifdhidggdkkfjbgehbfiibdicgccfggffgbeibfgdjfhbibdfcjdhghfbfcjjfhcckkbfhfefdkibbehkbgcchjkjefjdekkkfigjeiebkiffghhjkkkefjdfjijfkghgfccdijdjiiekbgjjdfdddfikhbebiccdjeidcfckfcgikhkhcdjbhibgjjdcjieifjhhjbkkffbiecjciiiifjihcjcihbfcegfjbcdgfkdcdihcbhgjdjkeibdjkcdehhibhgdfiieihfdjgjjcdhhdibbefdiekgihdfbekbkcgjfjejjefkhgikcdkgdieieegheghggjkhidciijgjdkhkifkihibfieikjkiibhedifbfbhgficbcdcgfejjckkeecjidkhkijiifkcheicdehbkggehdbedegbckjbiefcjdhjbbibcbjdcijkgjfgjcckehgkhcbfbckghkkibdgijhfkidceicchkbgkkdchjfhecfdhfkcgbjkcjckeddcbdcbbdffdjkkcibbhchdhhiehjghceiiccifdhjjdfhkijgigchcbfjedidjdjbeiichcbikghhhcbbkkcgedgkegkfekdjcdcfiecbefkbebbbicdjdeijjiicdckegdhhddbbbbjfhhjidhigeijggbbbghbdicekcfjcgbhfbfcheejbfhjegehcibjdcehgghckdjikgchfgjchjkiebijkccbebhdhfkgfjbhfbekhbhffffiigdfhigbdfkgcebkdfhbhibebdfjdhhieicgeecbbgkddeikgjbjfgkfekifgdiidhcdfejcejehfggfdefbhhhjbgfkihcbhfgeehfkjbjhfgdjhchkekkgkihbbcgbfekefghhbckkkjhefjhcigdgbjhikdjihjfhdfhbgekcjbjeejccckkdfcdchkcihefiejccjfjhjffbgjehcifgjkecffbfgkbdeebikgjcbcbcjdidkhehffkgbdcedeeigedjfkjhkgkjcgbcgjkkcihghcehhcijkdiehfhibddiciigifbdfbfekeekiikbdccfkckdhfcgdkieeiikdiihkjcichbhifjdefbjjejeghdkekbjjjebhdfcbcfbdkcihkjhecdiedieedkejjehhfjefiekchfghhhbdbfjdejkdebfcgdikkkcbbfieegbbdhdehjcgdiekjijifjhfjeghcgegdejjgbbibkkjgggkjefgidfgfikcbkihkibefejddddfdjhgbfgkehbkgbhdckbfbkkfbicgfjkjgcdbcjkjkfifhffcddkffhfdccefjbcecbkefjhgicbkijfeihckcfgcjbbejgjjdjijgigjgfhigehicgkddjcdhdibecdjdbkjbgjhcgdcdhgiefekibjhidkdijiihefejdjkjefcggcekighfdgbcjjdebicdefgigjdiceebhjjggbijfbgggkhkbccfdikcdfjjjddkhcfijkhedjdfdibggfdefebghdheejbkhjjjfbdcdihhkekgkcdkbbcfgbkfecigeghiehcbibcicbbehchhbjghcebfbkgdeekedfcbbiieddgbikcdjhdfcibhgehgcjdcihfiifhcedbbjdidibfgegfficcbebkegceedjbibgcjbbheiffkkgbjjicjhkcgeebbjcddekecifefkiidhggjedhkgbjcikdfckifgdibcgcjjkhejkiegihgejjekfhbchbdhehfkgfgchcgdcjcjidibjkekggejbkkekgjkcebbjefjkcdedfcdceeffjjieegedkfkjjeiebihgffhdddegkgkjkkbggdbgfjbdijedjfbdfkickieigecekikcekbccjeddfieihefbfcdjchcbebjjjfkkdgihjehfeedidfgccfikfbcckdhedbbkiegcfhikheidgdbhbjihcdbejjfkccfjieeccfbdfdhddjhdfbebhjkfgbedejcijkfbjiheegjjhigejcefekikbeibhbkibkbgikdeiceghbbifjhddbhjhjbdfihebbidffgifebjdecbjhegjdhbkkbjchbkekjdiedbdcjfckejdjhhgkkchdhjbgdckgebcjjdcddekiiifcbgbfgkbbhccdgbbdkeedbhhgbgceekhkidbjeghgjfghgcdjkeciciehjdjgeikhhjeifegefhgfckdhhjidheeedbdhcgejfffhckbdffihhjcejejbiifdhkkeghdfdbhkddfdhdijckcfjbkijffeegjicbkihghfeedfkdficdghdbceigiiiiccjddjgiefhiicjjcjhfdejcghfijcechgjkffbcdjigbbidchkgdbjkgdddikkeecfgjicgejbbikibkebhibbdcjiggfjiibgfbfjcciikkibiecfgkbfcbeefkedhkeeddkhfjjhfigkfghhkgccefhfihkjkhhdjfjhebjckjjcfeiiebhiiifbcbdfjcbbiekkkcdiiihjdjfhkecffckbbhjffbjiikdfkfebffcgejhhgceifdejebhjfbbefkjgfcjfggkjkgcjhfebibieegdfdbdihgkgfbhhihjejdbcjeeebefbkgkbgjhehgcgfjghbjbbkjhhhbihcghbjebfgjgjdbefhdfgfefdfjikchcjkjgejfifebjjhhbeiceihgfcgdejkkbbiigkhcbffffkfkgbiiegjgfkcgchigbedfgdbdcechjecedkfddgckkkcdjdgiiebcgjfghgbecdkefcicbjcfekfbehcjeebegjhjhdfjjdgbjdggcfidifhbfihjbjjjedhkgbfgddfbeckhigjbbehdicfdckegfbeejchkjegbkfhedkdbbjkfkfbgdeihfefgbgbfddibgbbihgdbjfecidjgcikebkccihkddffedeehdffhkhkgfkcddkcgjbfjefbgbdjgddfgefgcbhiejhbiekkhkefhkjeieffcdchbfhegddkkeekkeghfiheddffcbejgkihhjkedchcbidechfhccegicfgddfhfcjefkhhgbigcibihkjgekbifhkkgkdikdggiidbebhjckhigbdkchbgecbjbjfejffciifkkcgdgeckkidieejegdiggijjkkiibbdfhdekcbdfhffjkhbikkgdjbbfihjffgkgbijhdiffegjkhhfcjbfkeicfkkcjgjcbjbdibcgbfjddedeffiechdeijjcjjiddgjebikchhhgjdkcbgbkbcekbkfhffdehbdcfkeidjehfgibhbikkcdifhfdgkgbkckfgdchcejiiekkicehckbgbfgjbedidgebjdiigdcfejgkdhjbdficihgkiedigggefhdjgcfihfjigiejhedgbcdcfbihfhdkjckkjcgdihcigiddgbejhgcjfehkgjcgdifikcfihigiigfbhgkfbgfjbcjkgfddkfkbkgbijhekjhchjjdckehkbicfceghgbigcfichechfhbjhjckjhcdkcjiiefdhbhkkeejgfgjkbgjkghgccdihbkfhkiihiickiffkkgbikijbcjgeghfhhckjjjjbbgkgiecbckfdghckkbecegkchkbcbciggfdhcjeihbgdcdhhdbfkdefhcijfhjfdhecgfbibdfifjkjceehibdedkjbkegefjjdeeicjkgiikhchdfbdeefekkighdgbfjiebdkjekkfghcicefkgichbghbkkjdkkficbbfgbibjdcifkcjdggfifgfgiehecieifhjcffhgjheicdccjehdgciicgehikicfdikjehgdeckebbjkhkkjdegdbfiehiijideidfcjhiigggidbdjikbhejddjdcbbhggijiffchijfejhchhejekbcidkkjcjcgecjehgdechdjjeicgbiggeekcbhdcffkdhjfhfefdehgibhghhjekcfbcidkihbjegidcfgbgjbbjhjigffidfhbkbefkbefbdkdeibjgkcfkibdgdhbhgdbdhcehdcehchkeeckbhjbciieefeicihkieegegkjdigiffgibeegbcbccijkfhkiccdgfihcfkdkdbgcbcchjefcijkfcidkgbedkgeghjdegiifgiidjbheibjdiiekcidffhefgjhghhbhikbeibigebdedcbgiigkhhejgjkgifgedhgdkjjgbhjihebhihgdfhfidfefhdbdjechbjbhedbhegckifjfbfkfkfgkddfgbgdkhhgcffgijkgdechicjkcgddijbbdjhghjkchkhdgcdebhbbgfbhkfbekfgijcbgihhceijcejgkhdcjdefcdgfecgchgfieidcfbicggikjbiddbdckfbgebkcikkcdghfbjdddcbbiiijijchkidjgjdjbiiidihhcbbefgjibjhiccbedgbjikcijecbgbjfkbkcdjjbbggefededcbeegcfdbfjkbkbjegfffedcjhifkcjfjikgdbhcfcckddfdcfgcfeghhgbciifeckkedhgkkffdbgjhbedebibjckbdkcegdhhedbgicbefchhdgdkdfihfcieijhehfidehkehhcgbihbkceeckbbfdhbdckgdekjcdihcicdidfccbbcdhhkkehkhgfjhddgicgifbhbjggbjdgeidjeccgkcggcfdfdkgdcfkhhddhifijbhegcbfbgdikbkbhjhdcjfjjeddeicjfjbfjibhdkkffjcejghbghdgidcjhghdjchgehjhdigdjbgfgcbfejjicbhjjcecekbigbiiiidiedfkccjiecgjjghkckdijefibfhjbgdejddddjidbccfdhigjbgcfihgkkdjdkcegeijehddhcjcdkicjejfgckcjjkbdideikbbiddkecdfikhccdgiddjdcekgidejbgkgdgckhgieccfcjibggkbkfkkfcfkjhgjfijfhihikikejfibddfkddgjdfkecddbgiigghkbijidjjjgjkciedijhdidihghhcjfdifkeeggegdffjigcibikhefbkkikeifidgffheefffecbidhccffdebfgdkhekgkfbjggjekghibdegjedbkbgheecegfcidffkbdffedbjgifkgccbhcfigfecfccbfkjgedchfickgkgdfbbicbfjjfebdcfjekjehckcfbcdbigdhhfehejihhefhfcjkhbbbhhcebefihjgckkcihfekjcgjjgkgjdficihggijjjgfeicjdhcjkdifkdcjjfhhfdkdidgebhbbiggghjdjgjihkgdkfcfjjdkbbekhchchjdfjcfjdcbhkjdjkkfbhikckgddhibehbeigekhfhjiekcedijbjjckkhifeebhjfbhhhhhhehbdhdkjcdjedgjejbegbbfdjejeffjihkdekhggidccgbcbgggejhggbgfbjbegejhcbkcebjfkjdjbkfeicchhfebeegcjcbibeeddegbghckicccgcheejeggbeidecffcjegjkcgegdjdebkdjdffcdeebffcebjcfbgikhfibkdedcfgebkhgkkbghdkckkkiidkchfjjeekjgdbkbkbfijbdjkcidbeiejhjjejbhkkgjbhcibehcikchgejffhkgkbiddfbigjdejdgdkgjjcgcbdkkcejihbfifhcfhhbjgkbcggefhbhebekcigkjckggheddfffidjkhbibfikgbhicegficikiidfkfdfcjjgijiiichfkbcjgcigedjcgeefchefkhkijcjkcghfjbgegkcejeficfbfekfdejhkgchjhckdkkjcbgdjggkbbbedbbcfbhgkhhbkjhhjgdjdieceddfbfecfiiifhiekcjhhfgkdgjkbkkcdjcjihjkhkjdegfiedbbjdehekgifcekcfhgiikfedkgjeheieghdggcbhbdbcjdgdbjiiihkdkeciheehjjdbfcdbcifjefbkgedidcjiihgjgdbgeceggghfdbdhiiidcikefdikdkjccccdjgcikgdbfjdcfbfejefijgfdeekggeggfccfdijegkhiccheggckfchkdbgeekhfjiggbkkedjfggjieeddikkjffbkkieejkckeebhjkkfhfkgghjejhhkjhhiefdehecgjkcdbidibchddihhhcjifiiijfhjfehhbkffbjfjjgjgdjhgehehhfhgijbcfjkcekcffgiidickbbhhfdfbhehkjhieggkkiidkkjibiifgkdcfiikdhhjjbdccjigbjjifcdfkgkkefgjjdidfibdhhghdgbikegkjfkkkjiidhggebekcckgigjdkkcfecfhfbdjfjfdgeidfihjfkhhdihjbjbekccdfeeijgdbddhckhjdijcjgihffcicfgicfkfekkjieggkcekeieihgihhbhikfccgdgbcifkkdbjkjbbedfjedgkkfcgjckdgcdgfjdggdckbcdbbefbfegkcchhjghjcidghbkiihkbiecjegjdjhfigecgkidcfhkbigbjbdeighgdfifdefbcfffgkhdiibhfeiicbdfgkdgbejgjghhhgfdjefdddefjkcekjbbbbjbccfgiiejjfdibcjikgejbidhccciicigheecgigkcjbhdjhciekkckkdgfhgggigcgkjhebbbhkbffhhcgfgedkfdcfgjckcejieifdejehgcdkijddfkdbegghbkkkjjiegchjfhhkdbhjfjedbhdiieghekifhdejdjgbkhdejiehgbikkibgjkdgdhdedibhifhbkeckejbjfdbchecjjjbkiihbhebgggedkhkkbbcibccichbhbkjhjjbgdfcfbdgkidhgcffifbkjihjgedefeijghefigecgchhgbkgbfkifccikkibhiedigfbdbdcdhjkgeekfekdhdiejgjbefkgjehdchkikgiegbkchbcejccgfdcfkjhhkgdjfkdfbfbdcjbkfdbkhgjikccghhfcigkgedhbihkebggecddbfhhdhjejhhibgjeedhihfhcijefbkfcghdgbefkgehdkfekigkigdgfhjjdcdekcgfiedefjbhfigbhbejkcibihdbjehkfcffjeeehhgcjdkkcdbcdhefgkcffcfbihhheficcgchkhiedbbdkhbgbdhiiefjdebhgifcbbgdhhiddcfjegcekkbhcgeigigjfhgifedijggkbhhbijkiiiecbfkbibfjhcifhkekfbgeicgffhikfhhdkfhgdbjddiigjkkhjhgfcehijhbkgjjfgjjiefgdcddfecijbebddfffkjdgdbbbidfbkfjhkihccckgkkbjbhidcghdbhjjhfcgihhbfbibdfjkkjhjhcjjdbebeibkjfkcbejfhcfeddbbhkkkchfddiehedigbjckhkiegeideikgbdidjekhkihijhjhjcgckbebkbgdkefccedefgbjeeeegkdgfhhidjiccbghbdcfibecekjhbeifdekbhjjghhhbiccijiidkjcigejickegdgkbfjgejihgckkbbjdbbjgkighbdkjebejbbegfdejdfddjejfjbbkejcehiihfhheghccjhgdkijekeijiebbifdjjikkgcdecigfcfchbkehkjhchhjbeefjfdhcjgfcbfkbifjfbdbfkjihfefjhjhkjjfhhggfekhdigbbfghbdfccjhkghhbkcjdbfgjdfgbcjbfhbehigbkdiffdgjfcdbifhbjfcccebfbccccgbdcjchkbicgfgkhgebbkibfidkhejjekjekggheeedjfdgdcjfcgeiggfidiefdfbgjgjbechfkjjfeejgeedfgefgbhkbhehikcjghhfkchcigffkddjehgidechgfcgebcgebeibcgfeiefihdeebkdgieihkhhhjjhcecbjkdfcckfcgjihjkkcfdbckbcjjigcgcddgjcbdhgcdfkbdikjidchccehfkfcdkgejdkbegjhhcjbejjbbejhhbffjhhicdiedkijihcdkhfgiickcjdidedkccbcbgjcfgdhgekgdkhfhdkekdgjibcdegekdgifkcekhbhgbecjkhjdbjjggigjhbfkeiikcbfdfikgcgigjckhkjkhbijkgddbbhbdhdiedekhbijegggddgjdgkjhiehiiddehefkgegeejcibikkhbdhggjceijekehicbbicjgkdkccffbfjfjhkjjkjckdfbdebfhgdfjfjjhhhecgkbikjifhbicdbddddfjejgkkhcddbcdbhcbcicggcfjfhdiekefdidhcdgdkjgciecdhefkefgdhibdkbhcdbgefchjjejjddjjiebbgdkgkijhgjgibhbhkbidfebidkkfjjgkkfcjkdbgcehcbffkghhcebgikjeieddhjbejhjffdedkcejbkjkeddkdfkecicdbidhgjcbichckggfiiifeefkjfijgbcdhjfcckjdbjgbicbghkechhkiikghjdikhgicdgkjddgfkfideeibiggegejjcffjiiigbbgibcdhhgggbbkkgidkjbbcikjhikcjfikckcbdhiiibcjgiefgidfbihjicceibgekbdeighigcgfcceiedjkfjjcdbehhkijbkgikdjcjejjggikiiihdjdefhdbfgfgfdfccgcifdddkhgjkgjdfdfeihekeebbehicfbdiiefejigjddcifcekbcekgekgbbiiidbhedijckdicggiieihchcghbfeehgbbgdbbegfebiebkdddgcdbcgdcgcchfegefhdjhghcfchgfejihffgggiejbcfefgjjgcigdjekecefkeckdffidfjdfkfbddcbchifdiddbfkcifjiedikgkgdhdbgcfdcebddbffeigkccdhbiicddiejdkkdhdighigkfgedhhjidhgegfdeigdhjecdjffbkfgfdkhjcfikhdgbifkhgdbbgkcffcccddkhbhkkgefifbkfjjbihcbggigbfkjcdgbkkfidhijcjgcchdjkeiikgkgjicigedejieddkibcbfkfidbjeefjebicihkkfkchdbedcjkbgiiidjbgbdejbkdcjkfechfjkcgkkibjdkcjfbhejfjbbjeghjfdjchjkkbebkghceedkhbkkjgcckgkegkfigdcedfejefdjckiibdhjfgbdkekjgbcjdkjijbdiejhgggeggfgjchfjjbgkkbchdigdbdggbibdfgfddegdhfcegebibccjgekgibhcceijddidheecfkkbfhbceejhkcbhgedfdcjikechibegdfhfbdgcchhfihfgejehcjcgdkbkcccihgdccfbehigfjhbedcbcfgbifgbhfhfhekjghfddchkchhigicbgccbdcdbdbiggfjcjigedjkciifigjdkkkggfegdkhkjijdfgbjjhjbiejkbjicfkkfegjdhddebfgedbgbjgkiekfdfeikkbiejjjjgfcjgfceekgfhcdejhebickfciifkbjbkkdcjghkbdcdjebdbdjgbjgcghkeebcfjeceijfideibgkfhjkdechiiddhibfiebggbicjcfgghidjjcjjijbdghejijbicbihggkecfedibhckedbdgidgkghdkhkjedghbgfdccfccjejgcbekejcijgdfjjegkhifcggbbigekgdgdjjjeeehbehekfdkigbbedifddigjfkcdchecefeeefgijfekiifbciehcfgjcehgccjjeckbdgjcbkihieifbehjdjfkfbehidicfddgjgegghdbkbcickgcgikhdcddfbehdcfghhcdddddhgfikjgckfgkibkbikckcfdffhjdcfifhcjdgjeeecfhicihchhgfbjkccefebeffcekhkkbjkbbeddfiehebcibghefjiihfcibiehjbbhhgdjhhhifehkcihjfckbdihjeddhjiehcijcdigdiidebegckckbhhdkdehfbefkbbejffbjgikbbfgdbgjgjkjkkjeikdeibjgidfccigefkjhckbijdhdjcgjfgifhkifgefbkfcjidicjegghiefiiidefhkckbedbgbfhichikgffdjgkckkcggfhhecfkgjgehkhkffgkkjfedhcfdhdbfgicgeckgigcedehiggffdjgheibkgfhdgjhikijeiddjdiibcdbgbdcfkkffjbbigickhkicfbddbedkbhjhecdbfidehjdbhdekfbhdfkececfbdjjbjecdfjikidkgcecjgcdgidjkgdbeigjekdefhheedbeciibcghjikdfhfkckcgjedhickhhjhkchffbgfhbjdhgfkicccgfekjigddcdgcfeiieeckkfcdjfgejckhikhcihchbkjgbjkbfjbgdddejcccbdgecjjkkjbhifjkdjkcgbjegfcbcijbddfdgjjeiggbcdgbghdhkjdigbjdjbhdbibchffifdkjbijkhdiiebeiddcfbkjdfkfibeehcjefehibcgibkjecefcjecikddgbbggdkeiibiedgckjjegggfibegjgbihjkhbgjhkhccbdikegjjjchdkjkbefhbhbhcjegdhckhhhjdcihdjkhhdkekfejfjcfdkedjdbkebdhcbkeehkeihkiidjfgdekgkgjjbhcdfbcifhjidedjhgedebdhckkjjbgchefjekcehehehjbkihhdjikjbcchddcidhijcicbkegckhjhibieechkgeefegggikdhhehbbfehdkghjdhdefeicfgbigefigefdjhfckbhfifiekbdkcfkjfffcfikbhebihdkgifidkeddgjibdchkckiigkcffkdjjgdcefdcbcceeeieihiffhebfkjcgiejbkcgfkdhghkhccdghdceedjdfckcfjkhhieghhcjeekdceeckkgifgjkjgeeeibkbbgkidhegffbjjgjjkijkecggdihkfbbhckfigfcbighbhhhkfbdkibjhbfiffbfhcbgjhebdhiihhffkicibgjcjjikkekfgcfidcbijbhjjdikcebbfcijfkhejdejdjbhffiiefidejehjbcbbehdkhfkgjkjdfhkjcfbbefjhjdfieiceebkigijggkgehhibedjfchbckhdecdddedjbcbfggkfkegjjcbbkkiiibjfjgijfkdjiedhjejhgcbcdkceekffdcdfbfhggjikhbhkkbfjjibcbehkdjhbhdcfegjiifhgcdbcbgkdfchijfdkdbjfgiehedcebhcgiedehjdkbidiijdhjcbehjbgdbjbdihfdegddffdeigjhbjgfkkikedbcdcgkkfgdekkbgjdcbjccjgiccebjjjdkhgjkkkhgdbhhdjeheehdbkbgefcdfcjggkggjikgbggkhbkkfbidcggiiiigfdeigcfkieieefefiejhekhhddedheiebgbggjgggkgkegdkebhgdkhhchfdiekhciibbijjhigkkjdfjhcjjkdcdebikdbcejibbjgbjjcfkhjdgkcdeecjkchbbiccdcehjgkiddibibibficfjeeefkbcfbgddfijihjbbdjgfbhbbdgcgkdjhfbfgifhbgcjihfdehdgkhfkchgghecjkcbbdgikffefjhkhdbbbcbdjgekkbbhgkccjfhkihjdidbjhijggdhjjheiejeehccidcfbjkbbejbigibbkkjdkekbfjhefgibdjidbkjgjhhfheibfgjhgfiieekjkdbhgkfcegjjikjecgcfdbibgccdcehhiecckggdhikbgkjhfkeichchgjkfbkifedddcgfiffhdgkdghffdifceddejjhkdfgbfbbkhgghjheiffkhbbkgjjifbgkfbiikfkegdbigbfhjdkjeckdcffkddcjceedbecfjhikibidkchikgdbcccfjhjihjgkgihjghefdieifjhbjchijjefecdjbbkbjkkcccbgidfjggggeijigdfkhfgcjibgehfkhfihdfcjggdfeefcdgigchdbffdijeckbkhbbchhihkcifegijhikggcgbjgbjihfjbjkkkbgjjhieheicjjhkbheggfhjbhhfgjijkcfgdchhbkjchbekhjkdgiccchibjbfcgjhkkfgbgkejkijhkcdjbegbhhbbfbjiidjddfjiiikijdififcbdgejdhcjjjdhbdfcdhejegkkjikihfdibiheicieebjkcfjedjcchekejihedbhbkhdkiifgedikbhheejchfdicfcfjjidkgbdhddjhjdcejkjgcbjbbijfhgbjkhjdkfgbkbgdhdhhfgbiekhjcfhdgebddddheigkdjkghfcjegdjgfjgkfgbfidkjebejfggekiidkchchicibkbbbhebejkbikibecjdbgffjcfefcijibbkddikkjjffggieejhcbbifjicicjdgkeghgcgcfcdccefikkhcbdbifkfjhhjeggejhjhcibdhkidbcieckbgbbigdjkfedfbbgikdkigbkedkhdihbdkbijfcfekfbideihdhbbkdkkhfhbkckfeijbbgfkiikegdhfiebbegffejdhgkkijfbegdgfffdjicfhgkcbjbikfcjdhgeikjgjjgkkiikcggkhkjdciiikhgfjjjfikckcibdidjeeeegdfefgbcjgjfchckgibkfkkdcifffekhdhdbkibjjijigecfdchgeehjhidigjecbckhcbijjgdfhfdkjdejkbgbfdbhhffififgjkgkikgiejkbiefdbfjbcchchicbcjdfdebcgkkfbekigghdheebedhbcideibefdiibjcfffkfddciiffjgedecbjfddfjkcdhfgjicbkbijcdedkdfhdfkidjjgkbdghkdgjjhjjhiebdeihijbejkhbicjhkjeecgehkehbhhihicgkcgigggcidhfehfgidihbggdikcgkckkeehgjhfhfedccjcgcehheekgcidhhcjijkifcecijddjihbhcecghddkbdhbjbgeeedggikbejcjffdibfhhckiggbfgifkegkihckieeiijhicgjkdijkdccikgceidifcjjgbciiihfkddcjfihehkiibbgebkbckhjhdkkjjekjkecedkkjkhejfghfkciiigifjgjghcijghfcgfcgkchfffegbbkeigjbhegdfdjdggddcghhfbikfhfechifijeiebfigcdcikkhbghbjghkdegkicjhkdgcedjhdbbgcbgffggjjkhfedjjkkfdbfccjkcdcgehjbjghijededkeejbjkbhecfbiijegiijdbkgfcghdbjhicheifggccdihgdejekhjhjcjfgcdckhcddjgekgjbdghdikbfiedeideijkijegiejieggbgechgckdeiifcgibkdkebcbkhkkbhfifjiffkjebfdeehjcbkebhkkibchbcddhejkbjcdbdbhidbcfhdiebjcdbdififbcdebckfkhekbccefcdikgfkkhhdhkhbhjhhdhgcihgbgjjhkjcdbgedgddcbebjjgdkicdgjjfgfbgfkikjkfbdidiickgfjcjhbfhidiiegebfhbebegeggdhcefffigciiegcfcjgiibjcdjkhjfcbihjgdkhheiijkcjjbbjeedbbgcijbeehedfdbejikfcighccgcickddjgbikjjfjkhjbhdgfkdgbgidbedebebhkfkibbfcdgfhbfkgbjkjccichfbggbcdfdhghgjhfbccbgediijjeghijhhkkfjbhhffgidfbcfedgcbcidiccbfbidfjkhebeicjickcebgikbjciddebcjcjjicbgjdibiidfhfhkhjbdeeifhjbffkhgffgbfcfifekkdcfikcfejgffjfbgdddkbkfghiefgkhdjbfehhdbffdhhjcjibghcbhcighhikdiecjjbbbeikegkkkheigeiiikkekbgcejkgfhkggjidfedkbdddcgdhcfdfgbejefgiekfhfdfjehgbjeebhccicdfcedcjfggbgjgdedjffgjhhfdgbiikijdkjhjejchdgeejdcgkbijgijffbijigfkfjjbfehkbhbgbdeffdcigdcjdffiikffggkkiffjgdjfcecdkjegbfbdkkebdifbeigiccgeebikefkhedjjeigjdbfeefffcehebhhjgkbjbfibdkedfkjkdffbheejbgdefihghhhbdidffikhihhgkcefjfkfefedgbjfijhjhddcccebkfbebkjfdjbhhjcjbjhckkhfbbiidkddbccihjfjbbdbedkbgkgbhibhidkfggekjeecdhbchekbgbdhffcgkdhdcfcgfifkfgkjbegecckdhggideebfhidfkjfbcbbgckecgkdejihgghcijgkfkgedkfdcffhgichffcijfcgjgfgecickeckdjgfihgjcjckieeifkdcbjkebjbiehdhgjdefijjceiejkejkijfgbekkeeeggekdefcbebffkihgicbhighkjhkjfkjfkbekgbjekkfijfjhejgkekfhjkiifgjghhgcicjfgdcfikiejjcidchdciejkifeebhjiegfghkgecfkgccjiffgdffiibihbfgjjeicehbhgdgcbkecdkebgifkkdkkccciigbickekkbehfgdjigbgehkecdiffcbhhjgdgibdgbcdbkidkbkciicjihjhjbbfkjheiffhjjgieeikjeiiiehgbddjfiidjijfbfcigefjckehkeigdjfejghbekkfeihhgeddbfgcdhdidjkcbfdibbbgcghhcjgkgecdhficiehkbjgbggikbijikcdkbceebidbbfchbkfhgeekhgbkfgcckckbcgjfigdhjfbidhhddiejcckedgicbhbkbgdikdkiekhgjhecibjifbhhkchiehefecfcgihefghgkkgcdbkdhbjkeiikgjjkjehbdfdfjjhbcgjfebcghbegjjebdjickcicgdjfehhjbfddidecjkihdedbihbkhfffejkkdjdiebkigddhkcjefjcbhgghdikfgheefchiegckkgbdfhcjdehcciiggfkjgbdhdigbjbebijifddfhfifehkiejkbdcefhkdcfeciidhkbhdedfckcbcjdifhkijbffjeidifkdjchbfihgcjdjebcijbjhfffbhjjhcgbcdhhhgkchefckecdbedjcjhbgejdddhhhkkgbbehbbfdgdfjjdfbeddijigdejchbkbdjbgbcgjffcgbiiekhbcieebjcdkdhcfjgcedfcbeghhbfbfjfeegefegijfiehehbfghhegkikfgfhicddkbcjedjjgcehccgdfcfggikkhkgfdifibbiefgjdeehhdbffeefecbcfbikhdikgfhdhdefbkjhfhhgdfjehikecdkdjefffiigkgiefdefhbihehggfhbekjfdgdbgikgicidcgkigdgdgjkeehcbdjbgjgkegjchifkikjkgkkfdbccechfeeidekdcidkjihjhjjckefbfeihgkbbfeeecjjbdfeeecfhekdidjkdkedcikbkihjegkhibbcdkkicicjhcdhcbgbbiigjfdcjchbgcfkcdedghfjeccibjfihdidhcggcfjjchkcibgehkcefcbfkfidbkkigkfdhjdjjfffcfekcjgehfgkgdhhikebkbicbieiebkdbjcdhdhgfjhkgiejfikbidbkbffbffkfjckkjeffickfhgijikecdkfehhjghkkfgdhdhjbcchegdbcehkfdgediikkfdckiibfigbjbibbkghgkbdcffgchkjgifbhdkgfbkchihgbheigcfcebhdebcddficcccjhjghbhikdbiekcgdghgejffghbdjffddkjhbebjheebjckdkgkbigkkjgggeedgbkjeiegbfhdfckfkghjiieehhhcihhgcjggihddkifhkkfhhecgiegdefeigiehehhijcedjiiejcffcigkgbfgcbbfkhgfcdecgdcjehfbfgedifkefiiggdcggbbijhgeckhghcgbjcdggehgebjfhkfggcjeddkdedfbkggkiggidehigfebcgjhdikggghhiffcghekjedkgghggheiefjgebjjbhkbgikhfhdiigedeekigfjdgbkeigjjejejkejkhejfekkciidfcdecdbgbdggidfehhjgkjdjbekefjcbjdfdhhhkbehecbkkhfcfehecgckfifgjbjebkhhkijcekjbdkkcgdkhefjfdbeiihhikckgbijbjfghkbgghidgeikfjijhfiddgjkhdcfbhkbhecikdhjeekgjihcjjjgbbcckedffbhgkbebcchhicchiecbefedgeiicdhfdccbjhcfjgfjchgciedgkdkidbgbcgfegfjjfccjkbdgkihkddciedfibiikbkidbhkggiieckgbddceegehkcihjbgjcejedbkbkbhcbfkihdkkchdjeicjjhkcjfckccdggdcbfdbecifjiggedhebhkiedgjbeddhdejhidchkckjdjciigkhgdgebhdhcikfgikbigcdeeckbbcchhkgcecighfijbfbkigfcckdjgejjgjkdiggghddhbfhikkiihjkccjdchibkdifijdkcdkgheedgijkeechdfjjgjkfbhfgfgffgdiggkjigckcekgffbcidhgjhbjiifhkddfdkgfckhdkkcehiefheejgeijidfdkfkcdgceihbibgdeefihheekkbhbjikgebihgdgbijcicjekdcdgfeghdgkhebeekkhkhfchckgbdkbfbdjgjhckbfejfhkckickccieecefkjgfgjgehjgjdjbgcgdhedbbkfjbecjbhidkidiedjkggjdgejfikedccjkggkjgdiccdegekgjigjggeedfgkegghicfdbkiiedideeiebhdebffcfbgdebbcikiccbbkdhggcdfcjfekcdbbihdkkigbjeheggidejjkjhjhghhgkheegbiicdgkjghbbcefdgkjkejfdgfdbfdfejichkkebbdfbjhejbdcfbjffbjebefdfbhkkhegkehegikhhckkbfjkhjcdikjhhkhcibdfchgbjbiijikcfgbjfiibgiifdieieibfcfjebkecjeeibgjhgcbhgbchfghfhjbefckjhcecbdffhdhjkbhhjbkkkhhdgfgjfdihiiedeibkddgjhgcbkejibjkecjggicegifdigiceddbbhfcbgdkbdkjbgdiegdbheeeckejigecjjcgbegiffhicjhdhgjhhkgiihickjbgdccchckjicdddhcjikjfhdceekgjbcjjbkdbgiccebhgeihgcijfckhbfedjfgbhfjjhbcfjfeddgkbhhhgjkieifgdedbjfieggjddjidgdjhhkfkdhjjkckjfjkceffbeejbedcfjieiebeidgcjkgkfiiggkffgbdcjcdgjdkigfgdbdeiibgfkbkigkiecbdkbghgcigihibcbickffeeifjdkbhjebckbfbgbkjkjeghjdjbibfkdkfkkeccbeebgbifdjhkddgifichghkedbjhejgcijebekkedhebkbfijfcbbciekebhjgggcgjbbigiddbjgcjhjhijbkfgbejjecefjkcjkkehdejchddhgfggkdfdfejfgcejcbdgghfddkhcfccchdifbekhgkddkjejjhbdcfhceejiddfhkcchghihcbchdfbkhkfghgdjgcihekbgdcfjdkjijcjdjfegjjgcjdhjgehigehheecbcffhhjgkdeecbdcekjbbfccedkjbfggeedeghcjcjigdiedffeddhgcbedbkehkjebiehgfddgjgkkehedhdedcidjbbkfdkbfkdfkbbehhegikikkdfjbkckkjgiifggjhjedbckkifhieghgdibcgkkhkfckiicbebbjbigjbkhhkdijefjkkcijcddkjifecigjechjbehjgecekdeiddihhigdjjhicddkhdbdfckjcbbedckdikebhdfihfjkibdfjdeigibbifdcjkhcdjikhgejhjigkcjdjejdcccdchjcehjbfjeigkghfbkhhfigfkejikffcgigcjgjfkkbbeddgfgehkgefhicgfcikfddikeedkcdcbedcffeibhbbhigkbjbfdbeieikkjfkjhbcceecedjfijdkffbkhfjjgbfibkbeceihbhhfifgijbhkbbdcifkigjdcfkfkjbchfcbigkckdebcfcbkdbeikhhihhdeijkjdddhcebkhkfdccihddffgkfgdbhegkdkedfibeekigchkgeikciegjkddckgebjfdfjcekikkkiijhfkkkejhfggggikejicfeghbccbbfjibgdkihdhdidkcidkghkjkhfdjbcjcgdcchibkgbjibghgkifbkciijbhdcjdiffkcjhhcehbkbcehegkgkgicdgdfgfdhdeeeghfkefgkjdggcebjkciiiijkicfbcgdjfcgbibfgfhhejeikeffbdjgdbegkfgdgejhiidghdhbiebiicjejchfcdbkfgdeichjehjehhcgdiicghecckfcbejgbbhgjifgjedfegkhkhcikcikckghbcecdehjcijcgdbiddgfibeicikhbjcibheggijckgdkjchbbgjfebckehfdfbckicdeebiddbeekkckekbcgkgggfejdkfcigkkcibeihddgbfhhghcedjfkecjdhhehichdgfcgfekjhkkifdfkekfikghdffbhbbbbgecddkcdbdcehdegkdbcfhcfdcjcjhehfjkifhifgbijcdkggfiicibfhfkfgdfjbfiegehjeckeeigikdekdickdficcbhjfdjbdgiehhhebhgchkghkgcgigcgbhijjbdebciciiebfejjbgfhbikkjfhjkckkhbbegkcjcfkcbhcfkchdbbiikfkbckeeefgejgfbiedcddejifhkdjbfkbchfkdjgikiibdfifdfejikcghedbgdhgcckibdjieekkibkjddgcbbdheiigegckfdgfidghcehejgbbigjdidjhhbjkhcdgkdbgcihkhifgbhejihbkkgckjbbbdehcbfkfdkdhhfgdigkbhkckcjfebicibdkcckbfcegiehjibefhfkfkdjbcbggiihibheecggecikkhdecdcigcjfjcccijifikdjkgddjckffbbebdebigcddbbehdckebegigcdhieedhfekjjdccgkgjhkceejijjbcdbjgbiijgciiicgbkgbggkhjhjbijcbijjkihcjchkijhfdichcegefeiiikdeeghkifhdgdhhigcfhddidhfihcbbjhjbcgbcfhecchgcidiihhchiebegjjifbjjfeibdjeeigiggkeghcbdebgeikbffgcbceebbfkdhdbfkhifcebdkhjbhgggbhhgfeicjdjgidfgccjghbeikdihgdkfjihkkedcdiggjcehgfdkdbcfkijgeefecdjfdkchkgeijkkgbdgficgfecdjbfghfgjhhfckibkbekkgdceiiciejjhbfkfjfgjbdhgeiejcibikdkgihkkhefjjkhdjjhejfggegdcjdbciidfebejfghfddegjbjkibffiegbdfighckdiedcdjjgebebhefdfcdgjihdjbidjebjcbdkgcdedebckjiieccibbgeekcdcfdfcccbfdchfddgcbkjjfgfkedbhdfddjkfkddedghdfecidhijhjbchefghkhgkijbcffbheghcfhbikkfkceckghgechdffdgjiidhffibkeejecchhejebjhedghdfjjjkhckeggjcdcbbiibjgjhkhghiekgjeggccgihhhbccidfkhjhcjjegcgecfjeebigeggdgjjgdickbeedjeeggdeeddficcjiggjddkkjgekhgjjbhfjbejfghbbgkjjbejedicgidkejgjceehjgejbbbgkhedfhhekghhbccckjhfbfdkdggfbddjhedhekkehkbbccckjdfhhffhdibkfgbjbckffkhgjhkbgjbcijkjhcfccehkfcgcdjjkibfjffbdefjhiicchjjbceckihidckgjdiieejhfjjjfffigfeghfcbijihgjcjkfcidddhchdjfhgeijkdfffffbjdbfehddfbjfhgbcfbhejdidchfhcdbefccicickkkedffkgbdiccbcejbidifgbdgkgdgkeebkdefckigkkfeefdbcbbbcfdkdeigjgifejbiefbfcbbgkikgjgegkkcedgibgkkhiigdgijdgdcceejdfehfchkhiifbifckkggheihkcdgcjcjfjebfdcchdckggehchkeddejegdgbdidcdfgehbkhikgegkihdbgkckeekccfkjijeccbffcdcdfiecgdbfbjdkbggcgjdgcckkekciggdjjjheijjfbechfhfgigbdghekehgdfidkchkdbhiijgbbdbiecdgfhibfieifhjejihecgcdbdcedicjcfheibdbkkhcbhdhfjikggbbjejeekihhfbjebjjccdeidegchjdgchbkbhfdkbchcfibfdefdhdcjedbjikbggedbbijdiiggbjheghdcdddjekjdfbbhkjkgfedgiihfgkdkjjjkcgjjdfdegfjkbjhfjgjfkdicgjijbdjjdibfkjhfceedkikdidkhficbcibdkejcibcbbiefbcekfjijfjgjedkeigijgjgedjkbekgbcgiibjbjfdbdefhhgefgfgccbijjkghhjfebeffhffifbehkhgdkbhfciejgbfecihjicjcbgkgdikhiffdfdhcebjcgehdeheeehbficdbcbeejfgikcikghihchkhbigbehfdbjidfigifkkidfdiffgedikbkicbhejhijkgkkgebjdcigcebcijcdedckhbcfegcekjekbghbihhebjjefehffhccbgckbjgebjikicfjkhjhfgdcfbcfjhjfdciccgbhecbchfgdidegchckkegkdiehkjccidbckbbdbifejjkdgjdcecjffkbfgdfdbefkeebikjcbfjjccffgdcjhiigjihidggjddeibjihdiebkdedfhbbbcdjkdjckggkjdijikddifjgkkgceijfkbbhhdgbkcgekbcdkdigechfdhgfijfjfedcgcbfbghgjgjfgbgbdigfdcbiefcdgkffkkgcgkbideebfbjdhegbibdfgigfjcjeihjejjgfcfhkckdekiddffdfkgdecjckdgkbjkdcfijffkdfhkkfehejdbjhibjddhkfdjjbiibiffhijfbijhefkejekchhfccedcickkihfihhbkhbhbehdfejihcchibedhkifbidcbikbdcicgfgiiegikjfckhkbfjkhdchfbdhfhbkggjjdhcbhcggebhjcjecheeegbfghfbhjbjhhgkhgkggbikfgccbiigbiebefdkgckhjcjkbfikjccchdcgbcikcjehighkhijchibdfhjgjffikbhjdghjiehfdkcbcgkbchfdjihifddiijgiebchkkjbihddhjjechjghejgiijdfhefffjkbkcjkjekgcibieebhhbbccbcgicfjfejcbddkiikigfgebeddgcfiehhgecfgdjccdebjhjegjcckecdkbifjjicehjbbgjjjgbebibhckhighcekkefdbjhijgdjedjjdiehcfkfjfieccjdiecgdbiiechhikdfhgkjghdbdccbdibhfdcijdhdejgfgchegbkdigkeefhibhgcjgjcgbgdbjgbkekcbkbgcefkefbdkhcefkekfkghedikefcbbdifdfhbgfhgfbdbfkikjecckjkfdkffdbfeeiiibgkhehjbhgceegbhkkggdgjbbdkkbhibidfgijkgdedkfkhhhckdjgdbhbiejbdebbeeefegifkkgegfkcifijejceciefihjdgchbbbeddkkjedghfjbiecbjhicfefhefegiehgichbeccghhgjigbecdekbbiideddeihccjfffekehckjkbcidejchcbbfefebhckjbhjdkgfhddffefjigghidghbeggfbgjbhchdbchfekfkgkjcigggihibgifbbigecchejciccjijfehegjehcfijkebjejeckfheekjjgkhfceffhjcjfehccjgeegkcdgdgjkhgjfjjecbgbbcdhkkjbjggikfbikdfhdjiiedkehejjgbgdgdcekjbdkbgkkgbbbjigkkjgecbfdcjdkeegdiehbhbjikfkjdibceffkhfecijfjfccidjjbfhkkcgcibdkccbkddhhjjgikkcjfchhiebbhfccejeffhfggedfdhdcicfbbehbjbiifdicifhjgchicjfkcdbbbfgbkfgdfcjbkdeihghhfcckfkhfkhbhdgbeedjbckcieeghfifdgjgdgkkbdifgfhgckbckidhfddiddikcegbggdjgdeegjkdihbgegbedhdecijfhbdbdgjcdibdbieeccbcehjbkfidhbejfijkkhdbejbfeikkcjjifkkihibjgigfehigffebdjdkibgbdfhjfikgijcjccccefdhjgkkddhjkkghdjidgkkcgchkghijjjgkhkkhcjdeibjjikbckfbjegfhdehkkijjigeciccjcbcgcbgkefgghiigjekdcdeecbdkchkhgbeckkckjgcieckdgbdeehbfcggkbfdgcdccffchikdfbebcdkdbfjjkhkhihikcffijkgghdichfddbgehkhjdedkkjegghjdcbgedccebbddhefiekbegfjggcjijkddegbccdbfegigjheejhdhbikggeihfgddgjggkggfbfkhficfjgedeigddjchhcjihidfbjdecjhdfjjdkdiekhjgifbfdhbhgkjhkghgjebkfdfkcjhihhhbbgcjdcgbeidkghefbdejffdgjbfkefcjjjkkdgcgeddbkbbkedebhbeckgjkbcdgcfkgjfdcihcbgdckbcfjchdhjbfkcejfcdhijfcdejbfihiiggkhdickjbgehkjjkdibbfhjbegkjefbifhjjhcfbbjjjedhefkjijggbeehgikeeijhebgkegegkhkecjcdjkckbechkfhfhjbggejgbgkibdbcgbhjbkfdhdbbibjhggkehbgigekihbbdbekbegfieibibjjihfcfiebibkgehgjjkegbbfjkccigikibhffghjbijgigdbdijhegekheccedbeigiejdhfbcgkfjiecdcgieeiefibjecjiffghkgkfdkjccghjejdkeikcigcjbkkkdfbdkfebibiigcijkjkegjkeeigbhbfdbkcijhkdfkjecfcgghikfdbhdhhgbgjgeebckhccjhbhcfceckejbhghdbchfedebgbhihekkhcggdhfdfckdhfcdceddfihkidebcgjbhkhdibjfhiehbkihhdidkbeceidfdkckfgdbecifijcjcgkgeeiikdhkejbfhcdbedkfbbfijkhdedcbhjjdjhigibcicfhkcfkibkhbigdbbgifbckgedihffdhecdfihfbhcgdbdkdgkkdfgbhdjdhgiiegkbifcbdichegfebfgjkijjgibbibfggggbehjbfheecddegeicchfbffbihfeecffihiihjggfdbdijhiihkbceikhhdeifgbgjbkhkbecbfggiifckjbhfgcihejcigdkicbbehdfekfcefkiefddejbdgdgkdfedceececkbfeekibicfcggkeifdgdkieecehffechghkdiehicgkghggdcfghgjckigdhjjgfcecdbkfjhhjdjjbchkdchfdgbeihjbhijkgebdhcdegjikhjkhkceehefhiicjjjdgbkcjfhckijfieckgehbhkehikjjgbbfickkkdghekiicheeghjcfbekffkcjcihbecfkbcgbkbfecbicdghkjkbjejhhfdcffdkjfkdkkjjgjhccghkdfejbigjdhjckjkbjgfgfbedjicjjjjfhjfcbdikbefhdhijffjfgkdcdhijjikfcbciikjhhgjfjheecgechkkjjkghcbkjjbhidjbicjhbbieigjkhekhcbekkkcgghgcffkikgkeikgfgigcbggjhgciifdjebc"));
//        System.out.println("ANSWER: " + longestCommonSubSequence("HARRY", "SALLY"));
    }


    private static Map<String, Boolean> mem = new HashMap<>();
    static long substrCount(int n, String s) {
//        return fillMemArrayForSubStrCount(s);
//        return splSubStringCountRecursive(s, 0, n);
        return countSplSubStr(n, s);
    }

    private static long countSplSubStr(int lengthOfString, String s) {
        int answer = 0;

        class CharFreq {
            final char c;
            final int count;

            public CharFreq(char c, int charCount) {
                this.c = c;
                count = charCount;
            }
        }
        List<CharFreq> charFreqList = new ArrayList<>();

        int charCount = 1;
        for (int i = 1; i < lengthOfString; i++) {
            if (s.charAt(i-1) == s.charAt(i)) {
                charCount += 1;
            }
            else {
                charFreqList.add(new CharFreq(s.charAt(i-1), charCount));

                charCount = 1;
            }
        }

        // last char
        charFreqList.add(new CharFreq(s.charAt(lengthOfString-1), charCount));

//        STEP-1: count of all chars same
        for (CharFreq currCharFreq: charFreqList) {
            answer += (currCharFreq.count * (currCharFreq.count+1)) / 2;
        }

//        STEP-2: count when mid char is diff
        if (charFreqList.size() > 2) {
            for (int i = 1; i < charFreqList.size()-1; i++) {
                if (charFreqList.get(i).count == 1
                        && charFreqList.get(i-1).c == charFreqList.get(i+1).c) {
                    answer += Math.min(charFreqList.get(i-1).count, charFreqList.get(i+1).count);
                }
            }
        }

        return answer;
    }

    private static long fillMemArrayForSubStrCount(String s) {
        long count = s.length();
        for (int i = 0; i < s.length(); i++) {
            for (int j = i+1; j < s.length(); j++) {
                    String currSubstr = s.substring(i,j+1);

                    if (Boolean.TRUE.equals(mem.get(currSubstr))) {
                        count += 1;
                        System.out.println("From cache: " + currSubstr);
                    }
                    else if (isSpecialSubstr(currSubstr)) {
                        mem.put(currSubstr, true);
                        count += 1;
                    }
                    else
                        mem.put(currSubstr, false);
            }
        }
        return count;
    }

    /**
     * RECURSIVE - Sum of count of i+1,j & count of i, j-1
     *
     * @param startIndex - Inclusive
     * @param endIndex - Exclusive
     */
    private static long splSubStringCountRecursive(String s, int startIndex, int endIndex) {
        if (startIndex >= endIndex
                || startIndex == s.length()
                || endIndex < 1)
            return 0;

        return splSubStringCountRecursive(s, startIndex, endIndex-1)
                + splSubStringCountRecursive(s, startIndex+1, endIndex)
                + (isSpecialSubstr(s.substring(startIndex, endIndex)) ? 1 : 0);
    }

    /**
     * BRUTE FORCE - make all substrings and check if spl or not
     */
    private static long splSubstringCountBRUTEForce(String s) {
        long splSubstrCount = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                if (isSpecialSubstr(s.substring(i,j+1))) {
                    splSubstrCount += 1;
                }
            }
        }

        return splSubstrCount;
    }

    private static boolean isSpecialSubstr(String s) {
        if (s.isEmpty())
            return false;

        for (int i = 0, j = s.length()-1; i <= s.length()/2 && j >= s.length()/2; i++, j--) {
            if (s.charAt(i) != s.charAt(j))
                return false;

            if (s.charAt(0) != s.charAt(i) && i != j)
                return false;
        }

        System.out.println(s);
        return true;
    }

//  VALID STRING
    public static String isValid(String s) {
        Map<Character, Integer> charFreq = new HashMap<>();

        for (int i = 0; i < s.length(); i++) {
            charFreq.put(s.charAt(i), charFreq.getOrDefault(s.charAt(i), 0) + 1);
        }

        Map<Integer, Integer> freqCount = new HashMap<>();
        for (Map.Entry<Character, Integer> entry : charFreq.entrySet()) {
            freqCount.put(entry.getValue(), freqCount.getOrDefault(entry.getValue(), 0) + 1);
        }

        if (freqCount.size() == 1) {
            return "YES";
        }

        if (freqCount.size() > 2) {
            return "NO";
        }

        List<Integer> freqs = new ArrayList<>(freqCount.keySet());
        Integer higherFreq = Math.max(freqs.get(0), freqs.get(1));
        Integer smallerFreq = Math.min(freqs.get(0), freqs.get(1));

        if (smallerFreq == 1 && freqCount.get(smallerFreq) == 1) {
            return "YES";
        }

        if (Math.abs(higherFreq - smallerFreq) > 1 || freqCount.get(higherFreq) > 1) {
            return "NO";
        }

        return "YES";
    }

//    LENGTH OF LONGEST SUBSTRING
    public static int lengthOfLongestSubstring(String s) {
        if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }

//  LONGEST COMMON SUBSEQUENCE
    public static int longestCommonSubSequence(String s1, String s2) {
        /**
         * s1[i] == s2[j]   =>  1 + i-1,j-1
         * else             =>  max((i-1,j), (i,j-1))
         *
         * Base cases   =>  i=0 || j=0  =>   No common =>   Max len is 0
         */

        int m = s1.length();
        int n = s2.length();
        int[][] mem = new int[m+1][n+1];

        fillMemArrayForLCSubSeq(mem, s1, s2);

        return mem[m][n];
    }

    private static void fillMemArrayForLCSubSeq(int[][] mem, String s1, String s2) {
        for (int i = 0; i <= s1.length(); i++) {
            mem[i][0] = 0;
        }

        for (int j = 0; j <= s2.length(); j++) {
            mem[0][j] = 0;
        }

        for (int i = 0; i < s1.length(); i++) {
            for (int j = 0; j < s2.length(); j++) {
                if (s1.charAt(i) == s2.charAt(j))
                    mem[i+1][j+1] = 1 + mem[i][j];
                else
                    mem[i+1][j+1] = Math.max(mem[i][j+1], mem[i+1][j]);
            }
        }

        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                System.out.print(mem[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static int findLCSLength(String s1, int i, String s2, int j, int[][] mem) {
        if (i < 0 || j < 0)
            return 0;

        if (s1.charAt(i) == s2.charAt(j))
            return 1 + findLCSLength(s1, i-1, s2, j-1, mem);
        else
            return Math.max(findLCSLength(s1, i-1, s2, j, mem), findLCSLength(s1, i, s2, j-1, mem));
    }

}
